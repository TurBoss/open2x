
src/video/gp2x/.libs/SDL_gp2xvideo.o:     file format elf32-littlearm

Disassembly of section .text:

00000000 <GP2X_Available>:
static int GP2X_Available(void)
{
  // Of course we are.
  return 1;
}
       0:	e3a00001 	mov	r0, #1	; 0x1
       4:	e12fff1e 	bx	lr

00000008 <GP2X_DeleteDevice>:

////
// Cleanup routine
static void GP2X_DeleteDevice(SDL_VideoDevice *device)
{
       8:	e92d4470 	stmdb	sp!, {r4, r5, r6, sl, lr}
       c:	e59fa15c 	ldr	sl, [pc, #348]	; 170 <.text+0x170>
  SDL_PrivateVideoData *data = device->hidden;
#ifdef GP2X_DEBUG
  fputs("SDL: GP2X_DeleteDevice\n", stderr);
      10:	e59f315c 	ldr	r3, [pc, #348]	; 174 <.text+0x174>
      14:	e08fa00a 	add	sl, pc, sl
      18:	e590422c 	ldr	r4, [r0, #556]
      1c:	e79a2003 	ldr	r2, [sl, r3]
      20:	e1a06000 	mov	r6, r0
      24:	e59f014c 	ldr	r0, [pc, #332]	; 178 <.text+0x178>
      28:	e5923000 	ldr	r3, [r2]
      2c:	e08a0000 	add	r0, sl, r0
      30:	e3a01001 	mov	r1, #1	; 0x1
      34:	e3a02017 	mov	r2, #23	; 0x17
      38:	ebfffffe 	bl	0 <fwrite>
#endif

  if (data->fio)
      3c:	e594005c 	ldr	r0, [r4, #92]
      40:	e3500000 	cmp	r0, #0	; 0x0
    munmap(data->fio, 0x100);
      44:	13a01c01 	movne	r1, #256	; 0x100
      48:	1bfffffe 	blne	0 <munmap>
  data->fio = NULL;
  if (data->io) {
      4c:	e594c058 	ldr	ip, [r4, #88]
      50:	e3a03000 	mov	r3, #0	; 0x0
      54:	e35c0000 	cmp	ip, #0	; 0x0
      58:	e584305c 	str	r3, [r4, #92]
      5c:	0a00004b 	beq	134 <GP2X_DeleteDevice+0x12c>
    // Clear register bits we clobbered if they weren't on
    if (data->fastioclk == 0)
      60:	e1d434b0 	ldrh	r3, [r4, #64]
      data->io[SYSCLKENREG] &= ~(FASTIOCLK);
    if (data->grpclk == 0)
      data->io[VCLKENREG] &= ~(GRPCLK);
    // reset display hardware
    data->io[MLC_STL_CNTL]   = data->stl_cntl;
    data->io[MLC_STL_MIXMUX] = data->stl_mixmux;
    data->io[MLC_STL_ALPHAL] = data->stl_alphal;
    data->io[MLC_STL_ALPHAH] = data->stl_alphah;
    data->io[MLC_STL_HSC]    = data->stl_hsc;
    data->io[MLC_STL_VSCL]   = data->stl_vscl;
    data->io[MLC_STL_VSCH]   = data->stl_vsch;
    data->io[MLC_STL_HW]     = data->stl_hw;
    data->io[MLC_STL_OADRL]  = data->stl_oadrl;
    data->io[MLC_STL_OADRH]  = data->stl_oadrh;
    data->io[MLC_STL_EADRL]  = data->stl_eadrl;
    data->io[MLC_STL_EADRH]  = data->stl_eadrh;
    munmap(data->io, 0x10000);
      64:	e1a0000c 	mov	r0, ip
      68:	e3530000 	cmp	r3, #0	; 0x0
      6c:	059f3108 	ldreq	r3, [pc, #264]	; 17c <.text+0x17c>
      70:	059f2108 	ldreq	r2, [pc, #264]	; 180 <.text+0x180>
      74:	019c10b3 	ldreqh	r1, [ip, r3]
      78:	00012002 	andeq	r2, r1, r2
      7c:	018c20b3 	streqh	r2, [ip, r3]
      80:	e1d434b2 	ldrh	r3, [r4, #66]
      84:	e3530000 	cmp	r3, #0	; 0x0
      88:	059f30f4 	ldreq	r3, [pc, #244]	; 184 <.text+0x184>
      8c:	059f20f4 	ldreq	r2, [pc, #244]	; 188 <.text+0x188>
      90:	019c10b3 	ldreqh	r1, [ip, r3]
      94:	00012002 	andeq	r2, r1, r2
      98:	018c20b3 	streqh	r2, [ip, r3]
      9c:	e1d42ab4 	ldrh	r2, [r4, #164]
      a0:	e59f30e4 	ldr	r3, [pc, #228]	; 18c <.text+0x18c>
      a4:	e18c20b3 	strh	r2, [ip, r3]
      a8:	e1d41ab6 	ldrh	r1, [r4, #166]
      ac:	e2833002 	add	r3, r3, #2	; 0x2
      b0:	e18c10b3 	strh	r1, [ip, r3]
      b4:	e1d42ab8 	ldrh	r2, [r4, #168]
      b8:	e2833002 	add	r3, r3, #2	; 0x2
      bc:	e18c20b3 	strh	r2, [ip, r3]
      c0:	e1d41aba 	ldrh	r1, [r4, #170]
      c4:	e2833002 	add	r3, r3, #2	; 0x2
      c8:	e18c10b3 	strh	r1, [ip, r3]
      cc:	e1d42abc 	ldrh	r2, [r4, #172]
      d0:	e2833026 	add	r3, r3, #38	; 0x26
      d4:	e18c20b3 	strh	r2, [ip, r3]
      d8:	e1d41abe 	ldrh	r1, [r4, #174]
      dc:	e2833002 	add	r3, r3, #2	; 0x2
      e0:	e18c10b3 	strh	r1, [ip, r3]
      e4:	e1d42bb0 	ldrh	r2, [r4, #176]
      e8:	e2833002 	add	r3, r3, #2	; 0x2
      ec:	e18c20b3 	strh	r2, [ip, r3]
      f0:	e1d41bb2 	ldrh	r1, [r4, #178]
      f4:	e2833002 	add	r3, r3, #2	; 0x2
      f8:	e18c10b3 	strh	r1, [ip, r3]
      fc:	e1d42bb4 	ldrh	r2, [r4, #180]
     100:	e2833002 	add	r3, r3, #2	; 0x2
     104:	e18c20b3 	strh	r2, [ip, r3]
     108:	e1d41bb6 	ldrh	r1, [r4, #182]
     10c:	e2833002 	add	r3, r3, #2	; 0x2
     110:	e18c10b3 	strh	r1, [ip, r3]
     114:	e1d42bb8 	ldrh	r2, [r4, #184]
     118:	e2833002 	add	r3, r3, #2	; 0x2
     11c:	e18c20b3 	strh	r2, [ip, r3]
     120:	e1d41bba 	ldrh	r1, [r4, #186]
     124:	e2833002 	add	r3, r3, #2	; 0x2
     128:	e18c10b3 	strh	r1, [ip, r3]
     12c:	e3a01801 	mov	r1, #65536	; 0x10000
     130:	ebfffffe 	bl	0 <munmap>
  }
  data->io = NULL;
  if (data->vmem)
     134:	e5940048 	ldr	r0, [r4, #72]
     138:	e3a05000 	mov	r5, #0	; 0x0
     13c:	e1500005 	cmp	r0, r5
     140:	e5845058 	str	r5, [r4, #88]
    munmap(data->vmem, GP2X_VIDEO_MEM_SIZE);
     144:	159f1044 	ldrne	r1, [pc, #68]	; 190 <.LC13>
     148:	1bfffffe 	blne	0 <munmap>
  data->vmem = NULL;

  if (data->memory_fd)
     14c:	e5940000 	ldr	r0, [r4]
     150:	e5845048 	str	r5, [r4, #72]
     154:	e3500000 	cmp	r0, #0	; 0x0
    close(data->memory_fd);
     158:	1bfffffe 	blne	0 <close>
  free(device->hidden);
     15c:	e596022c 	ldr	r0, [r6, #556]
     160:	ebfffffe 	bl	0 <free>
  free(device);
     164:	e1a00006 	mov	r0, r6
}
     168:	e8bd4470 	ldmia	sp!, {r4, r5, r6, sl, lr}
     16c:	eafffffe 	b	0 <free>
     170:	00000154 	andeq	r0, r0, r4, asr r1
	...
     17c:	00000904 	andeq	r0, r0, r4, lsl #18
     180:	0000fbff 	streqd	pc, [r0], -pc
     184:	0000090a 	andeq	r0, r0, sl, lsl #18
     188:	0000fffb 	streqd	pc, [r0], -fp
     18c:	000028da 	ldreqd	r2, [r0], -sl
     190:	004ff000 	subeq	pc, pc, r0

00000194 <GP2X_CreateDevice>:

////
// Initalize driver
static SDL_VideoDevice *GP2X_CreateDevice(int devindex)
{
     194:	e92d4410 	stmdb	sp!, {r4, sl, lr}
     198:	e59fa1a4 	ldr	sl, [pc, #420]	; 344 <.text+0x344>
  SDL_VideoDevice *device;
#ifdef GP2X_DEBUG
  fputs("SDL: GP2X_CreateDevice\n", stderr);
     19c:	e59f31a4 	ldr	r3, [pc, #420]	; 348 <.text+0x348>
     1a0:	e08fa00a 	add	sl, pc, sl
     1a4:	e79a2003 	ldr	r2, [sl, r3]
     1a8:	e59f019c 	ldr	r0, [pc, #412]	; 34c <.text+0x34c>
     1ac:	e5923000 	ldr	r3, [r2]
     1b0:	e3a01001 	mov	r1, #1	; 0x1
     1b4:	e3a02017 	mov	r2, #23	; 0x17
     1b8:	e08a0000 	add	r0, sl, r0
     1bc:	ebfffffe 	bl	0 <fwrite>
#endif  

  /* Initialize all variables that we clean on shutdown */
  device = (SDL_VideoDevice *)malloc(sizeof(SDL_VideoDevice));
     1c0:	e3a00f8e 	mov	r0, #568	; 0x238
     1c4:	ebfffffe 	bl	0 <malloc>
  if (device) {
     1c8:	e2504000 	subs	r4, r0, #0	; 0x0
     1cc:	0a0000c7 	beq	324 <GP2X_CreateDevice+0x190>
    memset(device, 0, (sizeof *device));
     1d0:	e3a01000 	mov	r1, #0	; 0x0
     1d4:	e3a02f8e 	mov	r2, #568	; 0x238
     1d8:	ebfffffe 	bl	0 <memset>
    device->hidden = (struct SDL_PrivateVideoData *)
     1dc:	e3a000bc 	mov	r0, #188	; 0xbc
     1e0:	ebfffffe 	bl	0 <malloc>
      malloc((sizeof *device->hidden));
  }
  if ((device == NULL) || (device->hidden == NULL)) {
     1e4:	e3500000 	cmp	r0, #0	; 0x0
     1e8:	e584022c 	str	r0, [r4, #556]
     1ec:	0a0000c7 	beq	324 <GP2X_CreateDevice+0x190>
    SDL_OutOfMemory();
    if (device) {
      free(device);
    }
    return 0;
  }
  memset(device->hidden, 0, (sizeof *device->hidden));
     1f0:	e3a01000 	mov	r1, #0	; 0x0
     1f4:	e3a020bc 	mov	r2, #188	; 0xbc
     1f8:	ebfffffe 	bl	0 <memset>
  
  // Set the function pointers
  device->VideoInit = GP2X_VideoInit;
     1fc:	e59f314c 	ldr	r3, [pc, #332]	; 350 <.text+0x350>
  device->ListModes = GP2X_ListModes;
  device->SetVideoMode = GP2X_SetVideoMode;
  device->CreateYUVOverlay = NULL;
     200:	e3a01000 	mov	r1, #0	; 0x0
     204:	e79a2003 	ldr	r2, [sl, r3]
     208:	e59f3144 	ldr	r3, [pc, #324]	; 354 <.text+0x354>
     20c:	e5842004 	str	r2, [r4, #4]
     210:	e79a2003 	ldr	r2, [sl, r3]
     214:	e59f313c 	ldr	r3, [pc, #316]	; 358 <.LC27>
     218:	e5842008 	str	r2, [r4, #8]
     21c:	e79a2003 	ldr	r2, [sl, r3]
  device->SetColors = GP2X_SetColors;
     220:	e59f3134 	ldr	r3, [pc, #308]	; 35c <.LC27+0x4>
     224:	e584200c 	str	r2, [r4, #12]
     228:	e79a2003 	ldr	r2, [sl, r3]
  device->UpdateRects = GP2X_UpdateRects;
     22c:	e59f312c 	ldr	r3, [pc, #300]	; 360 <.LC27+0x8>
     230:	e584201c 	str	r2, [r4, #28]
     234:	e79a2003 	ldr	r2, [sl, r3]
  device->VideoQuit = GP2X_VideoQuit;
     238:	e59f3124 	ldr	r3, [pc, #292]	; 364 <.LC27+0xc>
     23c:	e5842020 	str	r2, [r4, #32]
     240:	e79a2003 	ldr	r2, [sl, r3]
  device->AllocHWSurface = GP2X_AllocHWSurface;
     244:	e59f311c 	ldr	r3, [pc, #284]	; 368 <.LC27+0x10>
     248:	e5842024 	str	r2, [r4, #36]
     24c:	e79a2003 	ldr	r2, [sl, r3]
  device->CheckHWBlit = GP2X_CheckHWBlit;
     250:	e59f3114 	ldr	r3, [pc, #276]	; 36c <.LC27+0x14>
     254:	e5842038 	str	r2, [r4, #56]
     258:	e79a2003 	ldr	r2, [sl, r3]
  device->FillHWRect = GP2X_FillHWRect;
     25c:	e59f310c 	ldr	r3, [pc, #268]	; 370 <.LC27+0x18>
     260:	e584203c 	str	r2, [r4, #60]
     264:	e79a2003 	ldr	r2, [sl, r3]
  device->SetHWColorKey = NULL;
  device->SetHWAlpha = NULL;
  device->LockHWSurface = GP2X_LockHWSurface;
     268:	e59f3104 	ldr	r3, [pc, #260]	; 374 <.LC27+0x1c>
     26c:	e5842040 	str	r2, [r4, #64]
     270:	e79a2003 	ldr	r2, [sl, r3]
  device->UnlockHWSurface = GP2X_UnlockHWSurface;
     274:	e59f30fc 	ldr	r3, [pc, #252]	; 378 <.LC27+0x20>
     278:	e584204c 	str	r2, [r4, #76]
     27c:	e79a2003 	ldr	r2, [sl, r3]
  device->FlipHWSurface = GP2X_FlipHWSurface;
     280:	e59f30f4 	ldr	r3, [pc, #244]	; 37c <.LC27+0x24>
     284:	e5842050 	str	r2, [r4, #80]
     288:	e79a2003 	ldr	r2, [sl, r3]
  device->FreeHWSurface = GP2X_FreeHWSurface;
     28c:	e59f30ec 	ldr	r3, [pc, #236]	; 380 <.LC27+0x28>
     290:	e5842054 	str	r2, [r4, #84]
     294:	e79a2003 	ldr	r2, [sl, r3]
  device->SetCaption = NULL;
  device->SetIcon = NULL;
  device->IconifyWindow = NULL;
  device->GrabInput = NULL;
  device->GetWMInfo = NULL;
  device->InitOSKeymap = GP2X_InitOSKeymap;
     298:	e59f30e4 	ldr	r3, [pc, #228]	; 384 <.LC27+0x2c>
     29c:	e5842058 	str	r2, [r4, #88]
     2a0:	e5841018 	str	r1, [r4, #24]
     2a4:	e5841044 	str	r1, [r4, #68]
     2a8:	e5841048 	str	r1, [r4, #72]
     2ac:	e5841088 	str	r1, [r4, #136]
     2b0:	e584108c 	str	r1, [r4, #140]
     2b4:	e5841090 	str	r1, [r4, #144]
     2b8:	e5841094 	str	r1, [r4, #148]
     2bc:	e5841098 	str	r1, [r4, #152]
     2c0:	e79a2003 	ldr	r2, [sl, r3]
  device->PumpEvents = GP2X_PumpEvents;
     2c4:	e59f30bc 	ldr	r3, [pc, #188]	; 388 <.LC27+0x30>
     2c8:	e58420b4 	str	r2, [r4, #180]
     2cc:	e79a2003 	ldr	r2, [sl, r3]
  device->CreateWMCursor = GP2X_CreateWMCursor;
     2d0:	e59f30b4 	ldr	r3, [pc, #180]	; 38c <.LC27+0x34>
     2d4:	e58420b8 	str	r2, [r4, #184]
     2d8:	e79a2003 	ldr	r2, [sl, r3]
  device->FreeWMCursor = GP2X_FreeWMCursor;
     2dc:	e59f30ac 	ldr	r3, [pc, #172]	; 390 <.LC27+0x38>
     2e0:	e58420a0 	str	r2, [r4, #160]
     2e4:	e79a2003 	ldr	r2, [sl, r3]
  device->ShowWMCursor = GP2X_ShowWMCursor;
     2e8:	e59f30a4 	ldr	r3, [pc, #164]	; 394 <.LC27+0x3c>
     2ec:	e584209c 	str	r2, [r4, #156]
     2f0:	e79a2003 	ldr	r2, [sl, r3]
  device->WarpWMCursor = GP2X_WarpWMCursor;
     2f4:	e59f309c 	ldr	r3, [pc, #156]	; 398 <.LC27+0x40>
     2f8:	e58420a4 	str	r2, [r4, #164]
     2fc:	e79a2003 	ldr	r2, [sl, r3]
  device->MoveWMCursor = GP2X_MoveWMCursor;
     300:	e59f3094 	ldr	r3, [pc, #148]	; 39c <.LC27+0x44>
     304:	e58420a8 	str	r2, [r4, #168]
     308:	e79a2003 	ldr	r2, [sl, r3]
  device->free = GP2X_DeleteDevice;
     30c:	e59f308c 	ldr	r3, [pc, #140]	; 3a0 <.LC27+0x48>
     310:	e58420ac 	str	r2, [r4, #172]
     314:	e79a2003 	ldr	r2, [sl, r3]
     318:	e5842234 	str	r2, [r4, #564]
  
  return device;
}
     31c:	e1a00004 	mov	r0, r4
     320:	e8bd8410 	ldmia	sp!, {r4, sl, pc}
     324:	e3a00000 	mov	r0, #0	; 0x0
     328:	ebfffffe 	bl	0 <SDL_Error>
     32c:	e3540000 	cmp	r4, #0	; 0x0
     330:	0a0000c5 	beq	31c <GP2X_CreateDevice+0x188>
     334:	e1a00004 	mov	r0, r4
     338:	ebfffffe 	bl	0 <free>
     33c:	e3a04000 	mov	r4, #0	; 0x0
     340:	ea0000c5 	b	31c <GP2X_CreateDevice+0x188>
     344:	0000019c 	muleq	r0, ip, r1
	...

000003a4 <GP2X_ListModes>:

////
// Link info to SDL_video
VideoBootStrap GP2X_bootstrap = {
  GP2XVID_DRIVER_NAME, "SDL GP2X video driver",
  GP2X_Available, GP2X_CreateDevice
};

////
// Set up hardware
static int GP2X_VideoInit(_THIS, SDL_PixelFormat *vformat)
{
  SDL_PrivateVideoData *data = this->hidden;
#ifdef GP2X_DEBUG
  fputs("SDL: GP2X_VideoInit\n", stderr);
#endif

#ifndef DISABLE_THREADS
  // Create hardware surface lock mutex
  data->hw_lock = SDL_CreateMutex();
  if (data->hw_lock == NULL) {
    SDL_SetError("Unable to create lock mutex");
    GP2X_VideoQuit(this);
    return -1;
  }
#endif

  data->memory_fd = open("/dev/mem", O_RDWR, 0);
  if (data->memory_fd < 0) {
    SDL_SetError("Unable to open /dev/mem\n");
    return -1;
  }
  data->vmem = mmap(NULL, GP2X_VIDEO_MEM_SIZE, PROT_READ|PROT_WRITE,
		    MAP_SHARED, data->memory_fd, 0x3101000);
  if (data->vmem == (char *)-1) {
    SDL_SetError("Unable to get video memory");
    data->vmem = NULL;
    GP2X_VideoQuit(this);
    return -1;
  }
  data->io = mmap(NULL, 0x10000, PROT_READ|PROT_WRITE,
		  MAP_SHARED, data->memory_fd, 0xc0000000);
  if (data->io == (unsigned short *)-1) {
    SDL_SetError("Unable to get hardware registers");
    data->io = NULL;
    GP2X_VideoQuit(this);
    return -1;
  }
  data->fio = mmap(NULL, 0x100, PROT_READ|PROT_WRITE,
		  MAP_SHARED, data->memory_fd, 0xe0020000);
  if (data->fio == (unsigned int *)-1) {
    SDL_SetError("Unable to get blitter registers");
    data->fio = NULL;
    GP2X_VideoQuit(this);
    return -1;
  }

  // Determine the screen depth (gp2x defaults to 16-bit depth)
  // we change this during the SDL_SetVideoMode implementation...
  vformat->BitsPerPixel = 16;
  vformat->BytesPerPixel = 2;
  vformat->Rmask = 0x1f00;
  vformat->Gmask = 0x07e0;
  vformat->Bmask = 0x001f;
  vformat->Amask = 0;

  this->info.wm_available = 0;
  this->info.hw_available = 1;
  this->info.video_mem = GP2X_VIDEO_MEM_SIZE / 1024;
  //  memset(data->vmem, GP2X_VIDEO_MEM_SIZE, 0);
  // Save hw register data that we clobber
  data->fastioclk = data->io[SYSCLKENREG] & FASTIOCLK;
  data->grpclk = data->io[VCLKENREG] & GRPCLK;
#ifdef GP2X_DEBUG
  fprintf(stderr, "fastioclk = %x, grpclk = %x\n",
	  data->fastioclk, data->grpclk);
#endif
  // Need FastIO for blitter
  data->io[SYSCLKENREG] |= FASTIOCLK;
  // and enable graphics clock
  data->io[VCLKENREG] |= GRPCLK;

  // Save display registers so we can restore screen to original state
  data->stl_cntl =   data->io[MLC_STL_CNTL];
  data->stl_mixmux = data->io[MLC_STL_MIXMUX];
  data->stl_alphal = data->io[MLC_STL_ALPHAL];
  data->stl_alphah = data->io[MLC_STL_ALPHAH];
  data->stl_hsc =    data->io[MLC_STL_HSC];
  data->stl_vscl =   data->io[MLC_STL_VSCL];
  // HW bug - MLC_STL_VSCH returns VSCL instead
  data->stl_vsch =   0;//data->io[MLC_STL_VSCH];
  data->stl_hw =     data->io[MLC_STL_HW];
  data->stl_oadrl =  data->io[MLC_STL_OADRL];
  data->stl_oadrh =  data->io[MLC_STL_OADRH];
  data->stl_eadrl =  data->io[MLC_STL_EADRL];
  data->stl_eadrh =  data->io[MLC_STL_EADRH];

  // Check what video mode we're in (LCD, NTSC or PAL)
  data->phys_width = data->io[DPC_X_MAX] + 1;
  data->phys_height = data->io[DPC_Y_MAX] + 1;
  data->phys_ilace = (data->io[DPC_CNTL] & DPC_INTERLACE) ? 1 : 0;
#ifdef GP2X_DEBUG
  fprintf(stderr, "real screen = %dx%d (ilace = %d)\n",
	  data->phys_width, data->phys_height, data->phys_ilace);
#endif
  int i;
  for (i=0; i<SDL_NUMMODES; i++) {
    data->SDL_modelist[i] = malloc(sizeof(SDL_Rect));
    data->SDL_modelist[i]->x = data->SDL_modelist[i]->y = 0;
  }
  data->SDL_modelist[0]->w =  320; data->SDL_modelist[0]->h = 200; // low-res
  data->SDL_modelist[1]->w =  320; data->SDL_modelist[1]->h = 240; // lo-res
  data->SDL_modelist[2]->w =  640; data->SDL_modelist[2]->h = 400; // vga-low
  data->SDL_modelist[3]->w =  640; data->SDL_modelist[3]->h = 480; // vga
  data->SDL_modelist[4]->w =  720; data->SDL_modelist[4]->h = 480; // TV NTSC
  data->SDL_modelist[5]->w =  720; data->SDL_modelist[5]->h = 576; // TV PAL
  data->SDL_modelist[6]->w =  800; data->SDL_modelist[6]->h = 600; // vga-med
  data->SDL_modelist[7]->w = 1024; data->SDL_modelist[7]->h = 768; // vga-high
  data->SDL_modelist[8] = NULL;

  this->info.blit_fill = 1;
  this->FillHWRect = GP2X_FillHWRect;
  this->info.blit_hw = 1;
  this->info.blit_hw_CC = 1;
  return 0;
}

////
// Return list of possible screen sizes for given mode
static SDL_Rect **GP2X_ListModes(_THIS, SDL_PixelFormat *format, Uint32 flags)
{
     3a4:	e92d4470 	stmdb	sp!, {r4, r5, r6, sl, lr}
     3a8:	e59fa054 	ldr	sl, [pc, #84]	; 404 <.LC32>
#ifdef GP2X_DEBUG
  fprintf(stderr, "SDL: GP2X_ListModes\n");
     3ac:	e59f3054 	ldr	r3, [pc, #84]	; 408 <.LC32+0x4>
     3b0:	e08fa00a 	add	sl, pc, sl
     3b4:	e1a06000 	mov	r6, r0
     3b8:	e1a05002 	mov	r5, r2
     3bc:	e59f0048 	ldr	r0, [pc, #72]	; 40c <.LC32+0x8>
     3c0:	e79a2003 	ldr	r2, [sl, r3]
     3c4:	e1a04001 	mov	r4, r1
     3c8:	e5923000 	ldr	r3, [r2]
     3cc:	e08a0000 	add	r0, sl, r0
     3d0:	e3a01001 	mov	r1, #1	; 0x1
     3d4:	e3a02014 	mov	r2, #20	; 0x14
     3d8:	ebfffffe 	bl	0 <fwrite>
#endif
  // Only 8 & 16 bit modes. 4 & 24 are available, but tough.
  if ((format->BitsPerPixel != 8) && (format->BitsPerPixel != 16))
     3dc:	e5d43004 	ldrb	r3, [r4, #4]
     3e0:	e3a00000 	mov	r0, #0	; 0x0
     3e4:	e3530008 	cmp	r3, #8	; 0x8
     3e8:	13530010 	cmpne	r3, #16	; 0x10
     3ec:	18bd8470 	ldmneia	sp!, {r4, r5, r6, sl, pc}
    return NULL;

  if (flags & SDL_FULLSCREEN)
     3f0:	e3550000 	cmp	r5, #0	; 0x0
    return this->hidden->SDL_modelist;
     3f4:	b596322c 	ldrlt	r3, [r6, #556]
     3f8:	e3e00000 	mvn	r0, #0	; 0x0
     3fc:	b2830080 	addlt	r0, r3, #128	; 0x80
  else
    return (SDL_Rect **) -1;
}
     400:	e8bd8470 	ldmia	sp!, {r4, r5, r6, sl, pc}
     404:	0000004c 	andeq	r0, r0, ip, asr #32
	...

00000410 <GP2X_FreeHWSurfaces>:

////
// Set hw videomode
static SDL_Surface *GP2X_SetVideoMode(_THIS, SDL_Surface *current,
				      int width, int height,
				      int bpp, Uint32 flags)
{
  SDL_PrivateVideoData *data = this->hidden;
  char *pixelbuffer;
#ifdef GP2X_DEBUG
  fprintf(stderr, "SDL: Setting video mode %dx%d %d bpp, flags=%X\n",
	  width, height, bpp, flags);
#endif

  // Set up the new mode framebuffer, making sanity adjustments
  // 64 <= width <= 1024, multiples of 8 only
  width = (width + 7) & 0x7f8;
  if (width < 64) width = 64;
  if (width > 1024) width = 1024;

  // 64 <= height <= 768
  if (height < 64) height = 64;
  if (height > 768) height = 768;

  // 8 or 16 bpp. HW can handle 24, but limited support so not implemented
  bpp = (bpp <= 8) ? 8 : 16;
  
  // Allocate the new pixel format for the screen
  if (!SDL_ReallocFormat(current, bpp, 0, 0, 0, 0)) {
    SDL_SetError("Couldn't allocate new pixel format for requested mode");
    return NULL;
  }
  
  // Screen is always a HWSURFACE and FULLSCREEN
  current->flags = (flags & SDL_DOUBLEBUF) | SDL_FULLSCREEN |
    SDL_HWSURFACE | SDL_NOFRAME;
  if (bpp == 8) current->flags |= SDL_HWPALETTE;
  data->w = current->w = width;
  data->h = current->h = height;
  data->pitch = data->phys_pitch = current->pitch = width * (bpp / 8);
  if (data->phys_ilace && (width == 720))
    data->phys_pitch *= 2;
  this->screen = current;
  current->pixels = data->vmem;

  // gp2x holds x-scale as fixed-point, 1024 == 1:1
  data->scale_x = (1024 * width) / data->phys_width;
  // and y-scale is scale * pitch
  data->scale_y = (height * data->pitch) / data->phys_height;
  data->x_offset = data->y_offset = 0;
  data->ptr_offset = 0;
  data->buffer_showing = 0;
  data->buffer_addr[0] = data->vmem;
  data->surface_mem = data->vmem + (height * data->pitch);
  data->memory_max = GP2X_VIDEO_MEM_SIZE - height * data->pitch;
  if (flags & SDL_DOUBLEBUF) {
    current->pixels = data->buffer_addr[1] = data->surface_mem;
    data->surface_mem += height * data->pitch;
    data->memory_max -= height * data->pitch;
  }
  GP2X_FreeHWSurfaces(this);
  GP2X_InitHWSurfaces(this, current, data->surface_mem, data->memory_max);

  // Load the registers
  data->io[MLC_STL_HSC] = data->scale_x;
  data->io[MLC_STL_VSCL] = data->scale_y & 0xffff;
  data->io[MLC_STL_VSCH] = data->scale_y >> 16;
  data->io[MLC_STL_HW] = data->phys_pitch;
  data->io[MLC_STL_CNTL] = (bpp==8 ? MLC_STL_BPP_8 : MLC_STL_BPP_16) |
    MLC_STL1ACT;
  data->io[MLC_STL_MIXMUX] = 0;
  data->io[MLC_STL_ALPHAL] = 255;
  data->io[MLC_STL_ALPHAH] = 255;
  pixelbuffer = data->vmem;
  if (data->phys_ilace) {
    data->io[MLC_STL_OADRL] = GP2X_PhysL(this, pixelbuffer);
    data->io[MLC_STL_OADRH] = GP2X_PhysH(this, pixelbuffer);
    if (data->w == 720) pixelbuffer += data->pitch;
  }
  data->io[MLC_STL_EADRL] = GP2X_PhysL(this, pixelbuffer);
  data->io[MLC_STL_EADRH] = GP2X_PhysH(this, pixelbuffer);
  return current;
}

////
// Initialize HW surface list
static int GP2X_InitHWSurfaces(_THIS, SDL_Surface *screen, char *base, int size)
{
  video_bucket *bucket;
#ifdef GP2X_DEBUG
  fprintf(stderr, "SDL: GP2X_InitHWSurfaces %p, %d\n", base, size);
#endif

  this->hidden->memory_left = size;
  this->hidden->memory_max = size;

  if (this->hidden->memory_left > 0) {
    bucket = (video_bucket *)malloc(sizeof(*bucket));
    if (bucket == NULL) {
      SDL_OutOfMemory();
      return -1;
    }
    bucket->next = NULL;
    bucket->prev = &this->hidden->video_mem;
    bucket->used = 0;
    bucket->dirty = 0;
    bucket->base = base;
    bucket->size = size;
  } else
    bucket = NULL;
#ifdef GP2X_DEBUG
  fprintf(stderr, "Screen bucket %p\n", &this->hidden->video_mem);
  fprintf(stderr, "First free bucket %p (size = %d)\n", bucket, size);
#endif  
  this->hidden->video_mem.next = bucket;
  this->hidden->video_mem.prev = NULL;
  this->hidden->video_mem.used = 1;
  this->hidden->video_mem.dirty = 0;
  this->hidden->video_mem.base = screen->pixels;
  this->hidden->video_mem.size = (unsigned int)((long)base - (long)screen->pixels);
  screen->hwdata = (struct private_hwdata *)&this->hidden->video_mem;

  SDL_CursorQuit();
  SDL_CursorInit(1);
  return 0;
}

////
// Free all surfaces
static void GP2X_FreeHWSurfaces(_THIS)
{
     410:	e92d45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
     414:	e59fa078 	ldr	sl, [pc, #120]	; 494 <.text+0x494>
  video_bucket *curr, *next;
#ifdef GP2X_DEBUG
  fprintf(stderr, "SDL: GP2X_FreeHWSurfaces\n");
     418:	e59f7078 	ldr	r7, [pc, #120]	; 498 <.text+0x498>
     41c:	e08fa00a 	add	sl, pc, sl
     420:	e79a2007 	ldr	r2, [sl, r7]
     424:	e1a08000 	mov	r8, r0
     428:	e59f006c 	ldr	r0, [pc, #108]	; 49c <.text+0x49c>
     42c:	e5923000 	ldr	r3, [r2]
     430:	e08a0000 	add	r0, sl, r0
     434:	e3a02019 	mov	r2, #25	; 0x19
     438:	e3a01001 	mov	r1, #1	; 0x1
     43c:	ebfffffe 	bl	0 <fwrite>
#endif

  next = this->hidden->video_mem.next;
     440:	e598222c 	ldr	r2, [r8, #556]
     444:	e5925064 	ldr	r5, [r2, #100]
  while (next) {
     448:	e3550000 	cmp	r5, #0	; 0x0
     44c:	0a000120 	beq	488 <GP2X_FreeHWSurfaces+0x78>
     450:	e59f6048 	ldr	r6, [pc, #72]	; 4a0 <.text+0x4a0>
#ifdef GP2X_DEBUG
    fprintf(stderr, "Freeing bucket %p (size %d)\n", next, next->size);
     454:	e79a3007 	ldr	r3, [sl, r7]
     458:	e1a02005 	mov	r2, r5
     45c:	e5930000 	ldr	r0, [r3]
     460:	e08a1006 	add	r1, sl, r6
     464:	e595300c 	ldr	r3, [r5, #12]
     468:	ebfffffe 	bl	0 <fprintf>
#endif
    curr = next;
    next = curr->next;
     46c:	e5954004 	ldr	r4, [r5, #4]
    free(curr);
     470:	e1a00005 	mov	r0, r5
     474:	ebfffffe 	bl	0 <free>
     478:	e3540000 	cmp	r4, #0	; 0x0
     47c:	e1a05004 	mov	r5, r4
     480:	1a000113 	bne	454 <GP2X_FreeHWSurfaces+0x44>
     484:	e598222c 	ldr	r2, [r8, #556]
  }
  this->hidden->video_mem.next = NULL;
     488:	e3a03000 	mov	r3, #0	; 0x0
     48c:	e5823064 	str	r3, [r2, #100]
}
     490:	e8bd85f0 	ldmia	sp!, {r4, r5, r6, r7, r8, sl, pc}
     494:	00000070 	andeq	r0, r0, r0, ror r0
	...

000004a4 <GP2X_SurfaceAllocate>:

//// SURFACE MEMORY MANAGER
// Allocate memory from free pool
static video_bucket *GP2X_SurfaceAllocate(_THIS, int size)
{
     4a4:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     4a8:	e59fa154 	ldr	sl, [pc, #340]	; 604 <.text+0x604>
  int left_over;
  video_bucket *bucket;
  SDL_PrivateVideoData *data = this->hidden;
#ifdef GP2X_DEBUG
  fprintf(stderr, "GP2X_SurfaceManager: Allocating %d bytes\n", size);
     4ac:	e59f9154 	ldr	r9, [pc, #340]	; 608 <.text+0x608>
     4b0:	e08fa00a 	add	sl, pc, sl
     4b4:	e1a06001 	mov	r6, r1
     4b8:	e79a4009 	ldr	r4, [sl, r9]
     4bc:	e59f1148 	ldr	r1, [pc, #328]	; 60c <.text+0x60c>
     4c0:	e590722c 	ldr	r7, [r0, #556]
     4c4:	e08a1001 	add	r1, sl, r1
     4c8:	e5940000 	ldr	r0, [r4]
     4cc:	e1a02006 	mov	r2, r6
     4d0:	ebfffffe 	bl	0 <fprintf>
#endif

  if (size > data->memory_left) {
     4d4:	e5973078 	ldr	r3, [r7, #120]
     4d8:	e1560003 	cmp	r6, r3
     4dc:	ca000171 	bgt	5cc <GP2X_SurfaceAllocate+0x128>
    fputs("SDL_GP2X: No video memory\n", stderr);
    SDL_SetError("Not enough video memory");
    return NULL;
  }

  for (bucket = &data->video_mem; bucket; bucket = bucket->next)
     4e0:	e2974060 	adds	r4, r7, #96	; 0x60
     4e4:	0a000141 	beq	50c <GP2X_SurfaceAllocate+0x68>
    if (!bucket->used && (size <= bucket->size))
     4e8:	e1d451f0 	ldrsh	r5, [r4, #16]
     4ec:	e3550000 	cmp	r5, #0	; 0x0
     4f0:	1a00013e 	bne	500 <GP2X_SurfaceAllocate+0x5c>
     4f4:	e594300c 	ldr	r3, [r4, #12]
     4f8:	e1560003 	cmp	r6, r3
     4fc:	9a000147 	bls	524 <GP2X_SurfaceAllocate+0x80>
     500:	e5944004 	ldr	r4, [r4, #4]
     504:	e3540000 	cmp	r4, #0	; 0x0
     508:	1a000138 	bne	4e8 <GP2X_SurfaceAllocate+0x44>
      break;
  if (!bucket) {
    SDL_SetError("Video memory too fragmented");
     50c:	e59f00fc 	ldr	r0, [pc, #252]	; 610 <.text+0x610>
     510:	e3a04000 	mov	r4, #0	; 0x0
     514:	e08a0000 	add	r0, sl, r0
     518:	ebfffffe 	bl	0 <SDL_SetError>
    return NULL;
  }

  left_over = bucket->size - size;
  if (left_over) {
    video_bucket *new_bucket;
    new_bucket = (video_bucket *)malloc(sizeof(*new_bucket));
    if (!new_bucket) {
      SDL_OutOfMemory();
      return NULL;
    }
#ifdef GP2X_DEBUG
    fprintf(stderr, "GP2X_SurfaceManager: Adding new free bucket of %d bytes @ %p\n", left_over, new_bucket);
#endif
    new_bucket->prev = bucket;
    new_bucket->used = 0;
    new_bucket->dirty = 0;
    new_bucket->size = left_over;
    new_bucket->base = bucket->base + size;
    new_bucket->next = bucket->next;
    if (bucket->next)
      bucket->next->prev = new_bucket;
    bucket->next = new_bucket;
  }
  bucket->used = 1;
  bucket->size = size;
  bucket->dirty = 0;
  data->memory_left -= size;

#ifdef GP2X_DEBUG
  fprintf(stderr, "GP2X_SurfaceManager: Allocated %d bytes at %p\n", size, bucket->base);
#endif
  return bucket;
}
     51c:	e1a00004 	mov	r0, r4
     520:	e8bd8ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     524:	e053b006 	subs	fp, r3, r6
     528:	0a000160 	beq	588 <GP2X_SurfaceAllocate+0xe4>
     52c:	e3a00014 	mov	r0, #20	; 0x14
     530:	ebfffffe 	bl	0 <malloc>
     534:	e2508000 	subs	r8, r0, #0	; 0x0
     538:	0a00017c 	beq	5f8 <GP2X_SurfaceAllocate+0x154>
     53c:	e79a3009 	ldr	r3, [sl, r9]
     540:	e59f10cc 	ldr	r1, [pc, #204]	; 614 <.text+0x614>
     544:	e5930000 	ldr	r0, [r3]
     548:	e1a0200b 	mov	r2, fp
     54c:	e1a03008 	mov	r3, r8
     550:	e08a1001 	add	r1, sl, r1
     554:	ebfffffe 	bl	0 <fprintf>
     558:	e994000c 	ldmib	r4, {r2, r3}
     55c:	e5882004 	str	r2, [r8, #4]
     560:	e5942004 	ldr	r2, [r4, #4]
     564:	e0833006 	add	r3, r3, r6
     568:	e3520000 	cmp	r2, #0	; 0x0
     56c:	e5884000 	str	r4, [r8]
     570:	e1c851b2 	strh	r5, [r8, #18]
     574:	e588b00c 	str	fp, [r8, #12]
     578:	e5883008 	str	r3, [r8, #8]
     57c:	e1c851b0 	strh	r5, [r8, #16]
     580:	15828000 	strne	r8, [r2]
     584:	e5848004 	str	r8, [r4, #4]
     588:	e584600c 	str	r6, [r4, #12]
     58c:	e5973078 	ldr	r3, [r7, #120]
     590:	e79a2009 	ldr	r2, [sl, r9]
     594:	e0663003 	rsb	r3, r6, r3
     598:	e5873078 	str	r3, [r7, #120]
     59c:	e59f1074 	ldr	r1, [pc, #116]	; 618 <.text+0x618>
     5a0:	e3a03001 	mov	r3, #1	; 0x1
     5a4:	e1c431b0 	strh	r3, [r4, #16]
     5a8:	e3a03000 	mov	r3, #0	; 0x0
     5ac:	e1c431b2 	strh	r3, [r4, #18]
     5b0:	e5920000 	ldr	r0, [r2]
     5b4:	e08a1001 	add	r1, sl, r1
     5b8:	e1a02006 	mov	r2, r6
     5bc:	e5943008 	ldr	r3, [r4, #8]
     5c0:	ebfffffe 	bl	0 <fprintf>
     5c4:	e1a00004 	mov	r0, r4
     5c8:	e8bd8ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     5cc:	e59f0048 	ldr	r0, [pc, #72]	; 61c <.text+0x61c>
     5d0:	e5943000 	ldr	r3, [r4]
     5d4:	e08a0000 	add	r0, sl, r0
     5d8:	e3a01001 	mov	r1, #1	; 0x1
     5dc:	e3a0201a 	mov	r2, #26	; 0x1a
     5e0:	ebfffffe 	bl	0 <fwrite>
     5e4:	e59f0034 	ldr	r0, [pc, #52]	; 620 <.text+0x620>
     5e8:	e3a04000 	mov	r4, #0	; 0x0
     5ec:	e08a0000 	add	r0, sl, r0
     5f0:	ebfffffe 	bl	0 <SDL_SetError>
     5f4:	ea000145 	b	51c <GP2X_SurfaceAllocate+0x78>
     5f8:	ebfffffe 	bl	0 <SDL_Error>
     5fc:	e1a04008 	mov	r4, r8
     600:	ea000145 	b	51c <GP2X_SurfaceAllocate+0x78>
     604:	0000014c 	andeq	r0, r0, ip, asr #2
	...

00000624 <GP2X_SurfaceFree>:

////
// Return memory to free pool
static void GP2X_SurfaceFree(_THIS, video_bucket *bucket)
{
     624:	e92d44f0 	stmdb	sp!, {r4, r5, r6, r7, sl, lr}
     628:	e59fa134 	ldr	sl, [pc, #308]	; 764 <.text+0x764>
  video_bucket *wanted;
  SDL_PrivateVideoData *data = this->hidden;
#ifdef GP2X_DEBUG
    fprintf(stderr, "GP2X_SurfaceManager: Freeing %d bytes @ %p from bucket %p\n", bucket->size, bucket->base, bucket);
     62c:	e59f7134 	ldr	r7, [pc, #308]	; 768 <.text+0x768>
     630:	e08fa00a 	add	sl, pc, sl
     634:	e79a6007 	ldr	r6, [sl, r7]
     638:	e5913008 	ldr	r3, [r1, #8]
     63c:	e1a04001 	mov	r4, r1
     640:	e591200c 	ldr	r2, [r1, #12]
     644:	e596c000 	ldr	ip, [r6]
     648:	e59f111c 	ldr	r1, [pc, #284]	; 76c <.text+0x76c>
     64c:	e590522c 	ldr	r5, [r0, #556]
     650:	e24dd004 	sub	sp, sp, #4	; 0x4
     654:	e08a1001 	add	r1, sl, r1
     658:	e1a0000c 	mov	r0, ip
     65c:	e58d4000 	str	r4, [sp]
     660:	ebfffffe 	bl	0 <fprintf>
#endif

  if (bucket->used) {
     664:	e1d431f0 	ldrsh	r3, [r4, #16]
     668:	e3530000 	cmp	r3, #0	; 0x0
     66c:	0a0001ac 	beq	6b8 <GP2X_SurfaceFree+0x94>
    data->memory_left += bucket->size;
     670:	e5953078 	ldr	r3, [r5, #120]
     674:	e594200c 	ldr	r2, [r4, #12]
    bucket->used = 0;

    if (bucket->next && !bucket->next->used) {
     678:	e594c004 	ldr	ip, [r4, #4]
     67c:	e0833002 	add	r3, r3, r2
     680:	e5853078 	str	r3, [r5, #120]
     684:	e35c0000 	cmp	ip, #0	; 0x0
     688:	e3a03000 	mov	r3, #0	; 0x0
     68c:	e1c431b0 	strh	r3, [r4, #16]
     690:	0a0001a6 	beq	6a0 <GP2X_SurfaceFree+0x7c>
     694:	e1dc31f0 	ldrsh	r3, [ip, #16]
     698:	e3530000 	cmp	r3, #0	; 0x0
     69c:	0a0001c4 	beq	718 <GP2X_SurfaceFree+0xf4>
#ifdef GP2X_DEBUG
      fprintf(stderr, "Merging with next bucket (%p) making %d bytes\n",
	      bucket->next, bucket->size + bucket->next->size);
#endif
      wanted = bucket->next;
      bucket->size += bucket->next->size;
      bucket->next = bucket->next->next;
      if (bucket->next)
	bucket->next->prev = bucket;
      free(wanted);
    }

    if (bucket->prev && !bucket->prev->used) {
     6a0:	e594c000 	ldr	ip, [r4]
     6a4:	e35c0000 	cmp	ip, #0	; 0x0
     6a8:	0a0001ac 	beq	6b8 <GP2X_SurfaceFree+0x94>
     6ac:	e1dc31f0 	ldrsh	r3, [ip, #16]
     6b0:	e3530000 	cmp	r3, #0	; 0x0
     6b4:	0a0001ae 	beq	6c0 <GP2X_SurfaceFree+0x9c>
#ifdef GP2X_DEBUG
      fprintf(stderr, "Merging with previous bucket (%p) making %d bytes\n",
	      bucket->prev, bucket->size + bucket->prev->size);
#endif
      wanted = bucket->prev;
      wanted->size += bucket->size;
      wanted->next = bucket->next;
      if (bucket->next)
	bucket->next->prev = wanted;
      free(bucket);
    }
  }
}
     6b8:	e28dd004 	add	sp, sp, #4	; 0x4
     6bc:	e8bd84f0 	ldmia	sp!, {r4, r5, r6, r7, sl, pc}
     6c0:	e79a1007 	ldr	r1, [sl, r7]
     6c4:	e594200c 	ldr	r2, [r4, #12]
     6c8:	e59c300c 	ldr	r3, [ip, #12]
     6cc:	e5910000 	ldr	r0, [r1]
     6d0:	e59f1098 	ldr	r1, [pc, #152]	; 770 <.text+0x770>
     6d4:	e0823003 	add	r3, r2, r3
     6d8:	e08a1001 	add	r1, sl, r1
     6dc:	e1a0200c 	mov	r2, ip
     6e0:	ebfffffe 	bl	0 <fprintf>
     6e4:	e8940005 	ldmia	r4, {r0, r2}
     6e8:	e590300c 	ldr	r3, [r0, #12]
     6ec:	e5802004 	str	r2, [r0, #4]
     6f0:	e594100c 	ldr	r1, [r4, #12]
     6f4:	e5942004 	ldr	r2, [r4, #4]
     6f8:	e0833001 	add	r3, r3, r1
     6fc:	e3520000 	cmp	r2, #0	; 0x0
     700:	e580300c 	str	r3, [r0, #12]
     704:	15820000 	strne	r0, [r2]
     708:	e1a00004 	mov	r0, r4
     70c:	e28dd004 	add	sp, sp, #4	; 0x4
     710:	e8bd44f0 	ldmia	sp!, {r4, r5, r6, r7, sl, lr}
     714:	eafffffe 	b	0 <free>
     718:	e594200c 	ldr	r2, [r4, #12]
     71c:	e59c300c 	ldr	r3, [ip, #12]
     720:	e59f104c 	ldr	r1, [pc, #76]	; 774 <.text+0x774>
     724:	e0823003 	add	r3, r2, r3
     728:	e08a1001 	add	r1, sl, r1
     72c:	e1a0200c 	mov	r2, ip
     730:	e5960000 	ldr	r0, [r6]
     734:	ebfffffe 	bl	0 <fprintf>
     738:	e5940004 	ldr	r0, [r4, #4]
     73c:	e594300c 	ldr	r3, [r4, #12]
     740:	e5901004 	ldr	r1, [r0, #4]
     744:	e590200c 	ldr	r2, [r0, #12]
     748:	e3510000 	cmp	r1, #0	; 0x0
     74c:	e0833002 	add	r3, r3, r2
     750:	e584300c 	str	r3, [r4, #12]
     754:	e5841004 	str	r1, [r4, #4]
     758:	15814000 	strne	r4, [r1]
     75c:	ebfffffe 	bl	0 <free>
     760:	ea0001a6 	b	6a0 <GP2X_SurfaceFree+0x7c>
     764:	0000012c 	andeq	r0, r0, ip, lsr #2
	...

00000778 <GP2X_AllocHWSurface>:

////
// Allocate a surface from video memory
static int GP2X_AllocHWSurface(_THIS, SDL_Surface *surface)
{
     778:	e92d4430 	stmdb	sp!, {r4, r5, sl, lr}
     77c:	e59fa07c 	ldr	sl, [pc, #124]	; 800 <.text+0x800>
  int w, h, pitch, size;
  video_bucket *gfx_memory;
#ifdef GP2X_DEBUG
  fprintf(stderr, "SDL: GP2X_AllocHWSurface %p\n", surface);
     780:	e59f307c 	ldr	r3, [pc, #124]	; 804 <.text+0x804>
     784:	e08fa00a 	add	sl, pc, sl
     788:	e1a05001 	mov	r5, r1
     78c:	e79a2003 	ldr	r2, [sl, r3]
     790:	e59f1070 	ldr	r1, [pc, #112]	; 808 <.text+0x808>
     794:	e1a04000 	mov	r4, r0
     798:	e08a1001 	add	r1, sl, r1
     79c:	e5920000 	ldr	r0, [r2]
     7a0:	e1a02005 	mov	r2, r5
     7a4:	ebfffffe 	bl	0 <fprintf>
#endif
  h = surface->h;
  w = surface->w;
  pitch = ((w * surface->format->BytesPerPixel) + 3) & ~3; // 32-bit align
  size = h * pitch;
  if (!(gfx_memory = GP2X_SurfaceAllocate(this, size)))
     7a8:	e5953004 	ldr	r3, [r5, #4]
     7ac:	e5951008 	ldr	r1, [r5, #8]
     7b0:	e5d32005 	ldrb	r2, [r3, #5]
     7b4:	e595000c 	ldr	r0, [r5, #12]
     7b8:	e0030192 	mul	r3, r2, r1
     7bc:	e2833003 	add	r3, r3, #3	; 0x3
     7c0:	e3c33003 	bic	r3, r3, #3	; 0x3
     7c4:	e0010093 	mul	r1, r3, r0
     7c8:	e1a00004 	mov	r0, r4
     7cc:	ebfffffe 	bl	4a4 <GP2X_SurfaceAllocate>
     7d0:	e3500000 	cmp	r0, #0	; 0x0
     7d4:	e3e03000 	mvn	r3, #0	; 0x0
     7d8:	0a0001fc 	beq	7f8 <GP2X_AllocHWSurface+0x80>
    return -1;

  surface->hwdata = (struct private_hwdata *)gfx_memory;
  surface->pixels = gfx_memory->base;
  surface->flags |= SDL_HWSURFACE;
     7dc:	e5953000 	ldr	r3, [r5]
     7e0:	e5902008 	ldr	r2, [r0, #8]
     7e4:	e3833001 	orr	r3, r3, #1	; 0x1
     7e8:	e5853000 	str	r3, [r5]
     7ec:	e5852014 	str	r2, [r5, #20]
     7f0:	e585001c 	str	r0, [r5, #28]
     7f4:	e3a03000 	mov	r3, #0	; 0x0
  return 0;
}
     7f8:	e1a00003 	mov	r0, r3
     7fc:	e8bd8430 	ldmia	sp!, {r4, r5, sl, pc}
     800:	00000074 	andeq	r0, r0, r4, ror r0
	...

0000080c <GP2X_FreeHWSurface>:

////
// Free a surface back to video memry
static void GP2X_FreeHWSurface(_THIS, SDL_Surface *surface)
{
     80c:	e92d4430 	stmdb	sp!, {r4, r5, sl, lr}
     810:	e59fa040 	ldr	sl, [pc, #64]	; 858 <.text+0x858>
  video_bucket *bucket;
#ifdef GP2X_DEBUG
  fprintf(stderr, "SDL: GP2X_FreeHWSurface %p\n", surface);
     814:	e59f3040 	ldr	r3, [pc, #64]	; 85c <.text+0x85c>
     818:	e08fa00a 	add	sl, pc, sl
     81c:	e1a04001 	mov	r4, r1
     820:	e79a2003 	ldr	r2, [sl, r3]
     824:	e59f1034 	ldr	r1, [pc, #52]	; 860 <.text+0x860>
     828:	e1a05000 	mov	r5, r0
     82c:	e08a1001 	add	r1, sl, r1
     830:	e5920000 	ldr	r0, [r2]
     834:	e1a02004 	mov	r2, r4
     838:	ebfffffe 	bl	0 <fprintf>
#endif
  /*  
  for (bucket = &data->video_mem; bucket; bucket = bucket->next)
    if (bucket == (video_bucket *)surface->hwdata)
      break;
  */
  bucket = (video_bucket *)surface->hwdata;
  GP2X_SurfaceFree(this, bucket);
     83c:	e1a00005 	mov	r0, r5
     840:	e594101c 	ldr	r1, [r4, #28]
     844:	ebfffffe 	bl	624 <GP2X_SurfaceFree>
  surface->pixels = NULL;
     848:	e3a03000 	mov	r3, #0	; 0x0
  surface->hwdata = NULL;
     84c:	e584301c 	str	r3, [r4, #28]
     850:	e5843014 	str	r3, [r4, #20]
}
     854:	e8bd8430 	ldmia	sp!, {r4, r5, sl, pc}
     858:	00000038 	andeq	r0, r0, r8, lsr r0
	...

00000864 <GP2X_DummyBlit>:

////
// Mark surface as unavailable for HW acceleration
static int GP2X_LockHWSurface(_THIS, SDL_Surface *surface)
{
  if (surface == this->screen)
    SDL_mutexP(this->hidden->hw_lock);

  if (GP2X_IsSurfaceBusy(surface)) {
    GP2X_DummyBlit(this);
    GP2X_WaitBusySurfaces(this);
  }
  return 0;
}

////
// Hardware can use the surface now
static void GP2X_UnlockHWSurface(_THIS, SDL_Surface *surface)
{
  if (surface == this->screen)
    SDL_mutexV(this->hidden->hw_lock);
}

////
// Dummy blit to flush blitter cache
static void GP2X_DummyBlit(_THIS)
{
  SDL_PrivateVideoData *data = this->hidden;
     864:	e590c22c 	ldr	ip, [r0, #556]

  do {} while (data->fio[MESGSTATUS] & MESG_BUSY);
     868:	e59c005c 	ldr	r0, [ip, #92]
     86c:	e2802034 	add	r2, r0, #52	; 0x34
     870:	e5923000 	ldr	r3, [r2]
     874:	e3130001 	tst	r3, #1	; 0x1
     878:	1a00021a 	bne	870 <GP2X_DummyBlit+0xc>
  data->fio[MESGDSTCTRL] = MESG_DSTENB | MESG_DSTBPP_16;
     87c:	e3a03060 	mov	r3, #96	; 0x60
  data->fio[MESGDSTADDR] = 0x3101000;
     880:	e59f2058 	ldr	r2, [pc, #88]	; 8e0 <.text+0x8e0>
     884:	e5803000 	str	r3, [r0]
  data->fio[MESGDSTSTRIDE] = 4;
     888:	e243305c 	sub	r3, r3, #92	; 0x5c
     88c:	e5802004 	str	r2, [r0, #4]
     890:	e5803008 	str	r3, [r0, #8]
  data->fio[MESGSRCCTRL] = MESG_SRCENB | MESG_SRCBPP_16 | MESG_INVIDEO;
     894:	e3a02e1a 	mov	r2, #416	; 0x1a0
  data->fio[MESGPATCTRL] = MESG_PATENB | MESG_PATBPP_1;
     898:	e283302c 	add	r3, r3, #44	; 0x2c
     89c:	e580200c 	str	r2, [r0, #12]
     8a0:	e5803020 	str	r3, [r0, #32]
  data->fio[MESGFORCOLOR] = ~0;
  data->fio[MESGBACKCOLOR] = ~0;
  data->fio[MESGSIZE] = (1 << MESG_HEIGHT) | 32;
  data->fio[MESGCTRL] = MESG_FFCLR | MESG_XDIR_POS | MESG_YDIR_POS | 0xAA;
     8a4:	e59f2038 	ldr	r2, [pc, #56]	; 8e4 <.text+0x8e4>
     8a8:	e59f3038 	ldr	r3, [pc, #56]	; 8e8 <.text+0x8e8>
     8ac:	e3e01000 	mvn	r1, #0	; 0x0
     8b0:	e5801024 	str	r1, [r0, #36]
     8b4:	e5801028 	str	r1, [r0, #40]
     8b8:	e580302c 	str	r3, [r0, #44]
     8bc:	e5802030 	str	r2, [r0, #48]
  asm volatile ("":::"memory");
  data->fio[MESGSTATUS] = MESG_BUSY;
     8c0:	e59c205c 	ldr	r2, [ip, #92]
     8c4:	e3a03001 	mov	r3, #1	; 0x1
     8c8:	e5823034 	str	r3, [r2, #52]
     8cc:	e2822034 	add	r2, r2, #52	; 0x34
  do {} while (data->fio[MESGSTATUS] & MESG_BUSY);
     8d0:	e5923000 	ldr	r3, [r2]
     8d4:	e3130001 	tst	r3, #1	; 0x1
     8d8:	1a000232 	bne	8d0 <GP2X_DummyBlit+0x6c>
}
     8dc:	e12fff1e 	bx	lr
     8e0:	03101000 	tsteq	r0, #0	; 0x0
     8e4:	000007aa 	andeq	r0, r0, sl, lsr #15
     8e8:	00010020 	andeq	r0, r1, r0, lsr #32

000008ec <GP2X_UnlockHWSurface>:
     8ec:	e59030bc 	ldr	r3, [r0, #188]
     8f0:	e1530001 	cmp	r3, r1
     8f4:	112fff1e 	bxne	lr
     8f8:	e590322c 	ldr	r3, [r0, #556]
     8fc:	e593003c 	ldr	r0, [r3, #60]
     900:	eafffffe 	b	0 <SDL_mutexV>

00000904 <GP2X_UpdateRects>:

////
// Flip between double-buffer pages
//  - added: moved setting scaler in here too
//   Can't see why this is supposed to return an int
static int GP2X_FlipHWSurface(_THIS, SDL_Surface *surface)
{
  SDL_PrivateVideoData *data = this->hidden;
  char *pixeldata;

  // make sure the blitter has finished
  if (GP2X_IsSurfaceBusy(this->screen)) {
    GP2X_WaitBusySurfaces(this);
    GP2X_DummyBlit(this);
  }

  // wait for vblank to start
  do {} while ((data->io[GPIOB_PINLVL] & GPIOB_VSYNC));

  // Wait to be on even field (non-interlaced always returns 0)
  //  do {} while (data->io[SC_STATUS] & SC_DISP_FIELD);

  // set write address to be the page currently showing
  surface->pixels = data->buffer_addr[data->buffer_showing];
  // Flip buffers if need be
  if (surface->flags & SDL_DOUBLEBUF)
    data->buffer_showing = 1 - data->buffer_showing;

  pixeldata = data->buffer_addr[data->buffer_showing] + data->ptr_offset;
  if (data->phys_ilace) {
    data->io[MLC_STL_OADRL] = GP2X_PhysL(this, pixeldata);
    data->io[MLC_STL_OADRH] = GP2X_PhysH(this, pixeldata);
    if (data->w == 720) pixeldata += data->pitch;
  }
  data->io[MLC_STL_EADRL] = GP2X_PhysL(this, pixeldata);
  data->io[MLC_STL_EADRH] = GP2X_PhysH(this, pixeldata);

  data->io[MLC_STL_HSC] = data->scale_x;
  data->io[MLC_STL_VSCL] = data->scale_y & 0xffff;
  //  data->io[MLC_STL_VSCH] = data->scale_y >> 16;

  // Wait for vblank to end (to prevent 2 close page flips in one frame)
  //  while (!(data->io[GPIOB_PINLVL] & GPIOB_VSYNC));
  return 0;
}

////
//
static void GP2X_UpdateRects(_THIS, int numrects, SDL_Rect *rects)
{
  // We're writing directly to video memory
}
     904:	e12fff1e 	bx	lr

00000908 <GP2X_SetColors>:

////
// Set HW palette (8-bit only)
static int GP2X_SetColors(_THIS, int firstcolour, int ncolours,
			  SDL_Color *colours)
{
     908:	e52de004 	str	lr, [sp, #-4]!
  unsigned short volatile *memregs = this->hidden->io;
     90c:	e590c22c 	ldr	ip, [r0, #556]
  int i;
#ifdef GP2X_DEBUG
  //  fprintf(stderr, "SDL: Setting %d colours, starting with %d\n",
  //  	  ncolours, firstcolour);
#endif
  memregs[MLC_STL_PALLT_A] = firstcolour;
     910:	e1a01801 	mov	r1, r1, lsl #16
     914:	e59cc058 	ldr	ip, [ip, #88]
     918:	e59f0054 	ldr	r0, [pc, #84]	; 974 <.text+0x974>
     91c:	e1a01821 	mov	r1, r1, lsr #16
     920:	e18c10b0 	strh	r1, [ip, r0]
     924:	e1a0e002 	mov	lr, r2
  asm volatile ("":::"memory");
  for (i = 0; i < ncolours; i++) {
     928:	e3520000 	cmp	r2, #0	; 0x0
     92c:	da000259 	ble	96c <GP2X_SetColors+0x64>
     930:	e28c0da5 	add	r0, ip, #10560	; 0x2940
     934:	e280001a 	add	r0, r0, #26	; 0x1a
     938:	e1a01003 	mov	r1, r3
     93c:	e3a0c000 	mov	ip, #0	; 0x0
    memregs[MLC_STL_PALLT_D] = ((int)colours[i].g << 8) + colours[i].b;
     940:	e5d13001 	ldrb	r3, [r1, #1]
     944:	e5d12002 	ldrb	r2, [r1, #2]
     948:	e0822403 	add	r2, r2, r3, lsl #8
     94c:	e1a02802 	mov	r2, r2, lsl #16
     950:	e1a02822 	mov	r2, r2, lsr #16
     954:	e1c020b0 	strh	r2, [r0]
    asm volatile ("":::"memory");
    memregs[MLC_STL_PALLT_D] = colours[i].r;
     958:	e4d13004 	ldrb	r3, [r1], #4
     95c:	e1c030b0 	strh	r3, [r0]
     960:	e28cc001 	add	ip, ip, #1	; 0x1
     964:	e15e000c 	cmp	lr, ip
     968:	1a00024e 	bne	940 <GP2X_SetColors+0x38>
    asm volatile ("":::"memory");
  }
  return 0;
}
     96c:	e3a00000 	mov	r0, #0	; 0x0
     970:	e49df004 	ldr	pc, [sp], #4
     974:	00002958 	andeq	r2, r0, r8, asr r9

00000978 <GP2X_VideoQuit>:

////
// Note:  If we are terminated, this could be called in the middle of
//        another SDL video routine -- notably UpdateRects.
static void GP2X_VideoQuit(_THIS)
{
     978:	e92d44f0 	stmdb	sp!, {r4, r5, r6, r7, sl, lr}
     97c:	e59fa078 	ldr	sl, [pc, #120]	; 9fc <.text+0x9fc>
  SDL_PrivateVideoData *data = this->hidden;
  int i;
#ifdef GP2X_DEBUG
  fputs("SDL: VideoQuit\n", stderr);
     980:	e59f3078 	ldr	r3, [pc, #120]	; a00 <.text+0xa00>
     984:	e08fa00a 	add	sl, pc, sl
     988:	e590422c 	ldr	r4, [r0, #556]
     98c:	e79a2003 	ldr	r2, [sl, r3]
     990:	e1a07000 	mov	r7, r0
     994:	e59f0068 	ldr	r0, [pc, #104]	; a04 <.text+0xa04>
     998:	e5923000 	ldr	r3, [r2]
     99c:	e08a0000 	add	r0, sl, r0
     9a0:	e3a01001 	mov	r1, #1	; 0x1
     9a4:	e3a0200f 	mov	r2, #15	; 0xf
     9a8:	ebfffffe 	bl	0 <fwrite>
#endif

  if (data->hw_lock) {
     9ac:	e594003c 	ldr	r0, [r4, #60]
     9b0:	e3500000 	cmp	r0, #0	; 0x0
     9b4:	0a00026f 	beq	9c4 <GP2X_VideoQuit+0x4c>
    SDL_DestroyMutex(data->hw_lock);
     9b8:	ebfffffe 	bl	0 <SDL_DestroyMutex>
    data->hw_lock = NULL;
     9bc:	e3a03000 	mov	r3, #0	; 0x0
     9c0:	e584303c 	str	r3, [r4, #60]
     9c4:	e3a05000 	mov	r5, #0	; 0x0
     9c8:	e1a06005 	mov	r6, r5
  }

  for (i = 0; i < SDL_NUMMODES; i++)
    if (data->SDL_modelist[i]) {
     9cc:	e5940080 	ldr	r0, [r4, #128]
     9d0:	e2855001 	add	r5, r5, #1	; 0x1
     9d4:	e3500000 	cmp	r0, #0	; 0x0
     9d8:	0a000277 	beq	9e4 <GP2X_VideoQuit+0x6c>
      free(data->SDL_modelist[i]);
     9dc:	ebfffffe 	bl	0 <free>
      data->SDL_modelist[i] = NULL;
     9e0:	e5846080 	str	r6, [r4, #128]
     9e4:	e3550008 	cmp	r5, #8	; 0x8
     9e8:	e2844004 	add	r4, r4, #4	; 0x4
     9ec:	1a000271 	bne	9cc <GP2X_VideoQuit+0x54>
    }

  GP2X_FreeHWSurfaces(this);
     9f0:	e1a00007 	mov	r0, r7
}
     9f4:	e8bd44f0 	ldmia	sp!, {r4, r5, r6, r7, sl, lr}
     9f8:	eafffffe 	b	410 <GP2X_FreeHWSurfaces>
     9fc:	00000070 	andeq	r0, r0, r0, ror r0
	...

00000a08 <GP2X_VideoInit>:
     a08:	e92d47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     a0c:	e59fa414 	ldr	sl, [pc, #1044]	; e28 <.text+0xe28>
     a10:	e59f3414 	ldr	r3, [pc, #1044]	; e2c <.text+0xe2c>
     a14:	e08fa00a 	add	sl, pc, sl
     a18:	e79a9003 	ldr	r9, [sl, r3]
     a1c:	e1a08000 	mov	r8, r0
     a20:	e59f0408 	ldr	r0, [pc, #1032]	; e30 <.text+0xe30>
     a24:	e24dd008 	sub	sp, sp, #8	; 0x8
     a28:	e3a02014 	mov	r2, #20	; 0x14
     a2c:	e5993000 	ldr	r3, [r9]
     a30:	e1a05001 	mov	r5, r1
     a34:	e08a0000 	add	r0, sl, r0
     a38:	e3a01001 	mov	r1, #1	; 0x1
     a3c:	e598722c 	ldr	r7, [r8, #556]
     a40:	ebfffffe 	bl	0 <fwrite>
     a44:	ebfffffe 	bl	0 <SDL_CreateMutex>
     a48:	e3500000 	cmp	r0, #0	; 0x0
     a4c:	e587003c 	str	r0, [r7, #60]
     a50:	0a000366 	beq	da0 <GP2X_VideoInit+0x398>
     a54:	e59f03d8 	ldr	r0, [pc, #984]	; e34 <.text+0xe34>
     a58:	e3a01002 	mov	r1, #2	; 0x2
     a5c:	e08a0000 	add	r0, sl, r0
     a60:	e3a02000 	mov	r2, #0	; 0x0
     a64:	ebfffffe 	bl	0 <open>
     a68:	e3500000 	cmp	r0, #0	; 0x0
     a6c:	e1a0c000 	mov	ip, r0
     a70:	e5870000 	str	r0, [r7]
     a74:	ba000361 	blt	d8c <GP2X_VideoInit+0x384>
     a78:	e58dc000 	str	ip, [sp]
     a7c:	e59fc3b4 	ldr	ip, [pc, #948]	; e38 <.text+0xe38>
     a80:	e3a00000 	mov	r0, #0	; 0x0
     a84:	e59f13b0 	ldr	r1, [pc, #944]	; e3c <.text+0xe3c>
     a88:	e3a02003 	mov	r2, #3	; 0x3
     a8c:	e3a03001 	mov	r3, #1	; 0x1
     a90:	e58dc004 	str	ip, [sp, #4]
     a94:	ebfffffe 	bl	0 <mmap>
     a98:	e3700001 	cmn	r0, #1	; 0x1
     a9c:	e1a04000 	mov	r4, r0
     aa0:	e5870048 	str	r0, [r7, #72]
     aa4:	0a00037f 	beq	e04 <GP2X_VideoInit+0x3fc>
     aa8:	e597e000 	ldr	lr, [r7]
     aac:	e3a0c103 	mov	ip, #-1073741824	; 0xc0000000
     ab0:	e3a00000 	mov	r0, #0	; 0x0
     ab4:	e3a01801 	mov	r1, #65536	; 0x10000
     ab8:	e3a02003 	mov	r2, #3	; 0x3
     abc:	e3a03001 	mov	r3, #1	; 0x1
     ac0:	e58de000 	str	lr, [sp]
     ac4:	e58dc004 	str	ip, [sp, #4]
     ac8:	ebfffffe 	bl	0 <mmap>
     acc:	e3700001 	cmn	r0, #1	; 0x1
     ad0:	e1a04000 	mov	r4, r0
     ad4:	e5870058 	str	r0, [r7, #88]
     ad8:	0a000376 	beq	de0 <GP2X_VideoInit+0x3d8>
     adc:	e597e000 	ldr	lr, [r7]
     ae0:	e59fc358 	ldr	ip, [pc, #856]	; e40 <.text+0xe40>
     ae4:	e3a00000 	mov	r0, #0	; 0x0
     ae8:	e3a01c01 	mov	r1, #256	; 0x100
     aec:	e3a02003 	mov	r2, #3	; 0x3
     af0:	e3a03001 	mov	r3, #1	; 0x1
     af4:	e58de000 	str	lr, [sp]
     af8:	e58dc004 	str	ip, [sp, #4]
     afc:	ebfffffe 	bl	0 <mmap>
     b00:	e3700001 	cmn	r0, #1	; 0x1
     b04:	e1a04000 	mov	r4, r0
     b08:	e587005c 	str	r0, [r7, #92]
     b0c:	0a00036d 	beq	dbc <GP2X_VideoInit+0x3b4>
     b10:	e3a03010 	mov	r3, #16	; 0x10
     b14:	e5c53004 	strb	r3, [r5, #4]
     b18:	e3a02002 	mov	r2, #2	; 0x2
     b1c:	e3a03c1f 	mov	r3, #7936	; 0x1f00
     b20:	e5c52005 	strb	r2, [r5, #5]
     b24:	e5853010 	str	r3, [r5, #16]
     b28:	e3a06000 	mov	r6, #0	; 0x0
     b2c:	e3a02e7e 	mov	r2, #2016	; 0x7e0
     b30:	e3a0301f 	mov	r3, #31	; 0x1f
     b34:	e5852014 	str	r2, [r5, #20]
     b38:	e5853018 	str	r3, [r5, #24]
     b3c:	e585601c 	str	r6, [r5, #28]
     b40:	e5d83028 	ldrb	r3, [r8, #40]
     b44:	e59f52f8 	ldr	r5, [pc, #760]	; e44 <.text+0xe44>
     b48:	e3c33002 	bic	r3, r3, #2	; 0x2
     b4c:	e5c83028 	strb	r3, [r8, #40]
     b50:	e5d82028 	ldrb	r2, [r8, #40]
     b54:	e59f42ec 	ldr	r4, [pc, #748]	; e48 <.text+0xe48>
     b58:	e3822001 	orr	r2, r2, #1	; 0x1
     b5c:	e5c82028 	strb	r2, [r8, #40]
     b60:	e5971058 	ldr	r1, [r7, #88]
     b64:	e5990000 	ldr	r0, [r9]
     b68:	e19130b5 	ldrh	r3, [r1, r5]
     b6c:	e2033b01 	and	r3, r3, #1024	; 0x400
     b70:	e1c734b0 	strh	r3, [r7, #64]
     b74:	e19120b4 	ldrh	r2, [r1, r4]
     b78:	e59f32cc 	ldr	r3, [pc, #716]	; e4c <.text+0xe4c>
     b7c:	e59f12cc 	ldr	r1, [pc, #716]	; e50 <.text+0xe50>
     b80:	e2022004 	and	r2, r2, #4	; 0x4
     b84:	e588302c 	str	r3, [r8, #44]
     b88:	e08a1001 	add	r1, sl, r1
     b8c:	e1a03002 	mov	r3, r2
     b90:	e1c724b2 	strh	r2, [r7, #66]
     b94:	e1d724b0 	ldrh	r2, [r7, #64]
     b98:	ebfffffe 	bl	0 <fprintf>
     b9c:	e597c058 	ldr	ip, [r7, #88]
     ba0:	e59f12ac 	ldr	r1, [pc, #684]	; e54 <.text+0xe54>
     ba4:	e19c30b5 	ldrh	r3, [ip, r5]
     ba8:	e28c0b0a 	add	r0, ip, #10240	; 0x2800
     bac:	e3833b01 	orr	r3, r3, #1024	; 0x400
     bb0:	e18c30b5 	strh	r3, [ip, r5]
     bb4:	e19c20b4 	ldrh	r2, [ip, r4]
     bb8:	e59f3298 	ldr	r3, [pc, #664]	; e58 <.text+0xe58>
     bbc:	e3822004 	orr	r2, r2, #4	; 0x4
     bc0:	e18c20b4 	strh	r2, [ip, r4]
     bc4:	e19c20b3 	ldrh	r2, [ip, r3]
     bc8:	e2833002 	add	r3, r3, #2	; 0x2
     bcc:	e1c72ab4 	strh	r2, [r7, #164]
     bd0:	e19c20b3 	ldrh	r2, [ip, r3]
     bd4:	e2833002 	add	r3, r3, #2	; 0x2
     bd8:	e1c72ab6 	strh	r2, [r7, #166]
     bdc:	e19c20b3 	ldrh	r2, [ip, r3]
     be0:	e2833002 	add	r3, r3, #2	; 0x2
     be4:	e1c72ab8 	strh	r2, [r7, #168]
     be8:	e19c20b3 	ldrh	r2, [ip, r3]
     bec:	e2833026 	add	r3, r3, #38	; 0x26
     bf0:	e1c72aba 	strh	r2, [r7, #170]
     bf4:	e19c20b3 	ldrh	r2, [ip, r3]
     bf8:	e2833002 	add	r3, r3, #2	; 0x2
     bfc:	e1c72abc 	strh	r2, [r7, #172]
     c00:	e19c20b3 	ldrh	r2, [ip, r3]
     c04:	e1c76bb0 	strh	r6, [r7, #176]
     c08:	e1c72abe 	strh	r2, [r7, #174]
     c0c:	e2833004 	add	r3, r3, #4	; 0x4
     c10:	e19c20b3 	ldrh	r2, [ip, r3]
     c14:	e2833002 	add	r3, r3, #2	; 0x2
     c18:	e1c72bb2 	strh	r2, [r7, #178]
     c1c:	e19c20b3 	ldrh	r2, [ip, r3]
     c20:	e2833002 	add	r3, r3, #2	; 0x2
     c24:	e1c72bb4 	strh	r2, [r7, #180]
     c28:	e19c20b3 	ldrh	r2, [ip, r3]
     c2c:	e2833002 	add	r3, r3, #2	; 0x2
     c30:	e1c72bb6 	strh	r2, [r7, #182]
     c34:	e19c20b3 	ldrh	r2, [ip, r3]
     c38:	e2833002 	add	r3, r3, #2	; 0x2
     c3c:	e1c72bb8 	strh	r2, [r7, #184]
     c40:	e19c20b3 	ldrh	r2, [ip, r3]
     c44:	e24330fe 	sub	r3, r3, #254	; 0xfe
     c48:	e1c72bba 	strh	r2, [r7, #186]
     c4c:	e19c20b3 	ldrh	r2, [ip, r3]
     c50:	e19c30b1 	ldrh	r3, [ip, r1]
     c54:	e1d040b0 	ldrh	r4, [r0]
     c58:	e59f11fc 	ldr	r1, [pc, #508]	; e5c <.text+0xe5c>
     c5c:	e1a042a4 	mov	r4, r4, lsr #5
     c60:	e2044001 	and	r4, r4, #1	; 0x1
     c64:	e2822001 	add	r2, r2, #1	; 0x1
     c68:	e2833001 	add	r3, r3, #1	; 0x1
     c6c:	e587201c 	str	r2, [r7, #28]
     c70:	e5873020 	str	r3, [r7, #32]
     c74:	e08a1001 	add	r1, sl, r1
     c78:	e5874028 	str	r4, [r7, #40]
     c7c:	e5990000 	ldr	r0, [r9]
     c80:	e58d4000 	str	r4, [sp]
     c84:	ebfffffe 	bl	0 <fprintf>
     c88:	e1a04007 	mov	r4, r7
     c8c:	e1a05006 	mov	r5, r6
     c90:	e3a00008 	mov	r0, #8	; 0x8
     c94:	ebfffffe 	bl	0 <malloc>
     c98:	e2855001 	add	r5, r5, #1	; 0x1
     c9c:	e3a03000 	mov	r3, #0	; 0x0
     ca0:	e3550008 	cmp	r5, #8	; 0x8
     ca4:	e5840080 	str	r0, [r4, #128]
     ca8:	e1c030b0 	strh	r3, [r0]
     cac:	e1c030b2 	strh	r3, [r0, #2]
     cb0:	e2844004 	add	r4, r4, #4	; 0x4
     cb4:	1a000322 	bne	c90 <GP2X_VideoInit+0x288>
     cb8:	e5973080 	ldr	r3, [r7, #128]
     cbc:	e5972084 	ldr	r2, [r7, #132]
     cc0:	e5971088 	ldr	r1, [r7, #136]
     cc4:	e3a090c8 	mov	r9, #200	; 0xc8
     cc8:	e1c390b6 	strh	r9, [r3, #6]
     ccc:	e597008c 	ldr	r0, [r7, #140]
     cd0:	e58760a0 	str	r6, [r7, #160]
     cd4:	e597c090 	ldr	ip, [r7, #144]
     cd8:	e597e094 	ldr	lr, [r7, #148]
     cdc:	e5974098 	ldr	r4, [r7, #152]
     ce0:	e597509c 	ldr	r5, [r7, #156]
     ce4:	e3a09e19 	mov	r9, #400	; 0x190
     ce8:	e3a070f0 	mov	r7, #240	; 0xf0
     cec:	e1c270b6 	strh	r7, [r2, #6]
     cf0:	e1c190b6 	strh	r9, [r1, #6]
     cf4:	e3a07e1e 	mov	r7, #480	; 0x1e0
     cf8:	e3a09d09 	mov	r9, #576	; 0x240
     cfc:	e1c070b6 	strh	r7, [r0, #6]
     d00:	e1cc70b6 	strh	r7, [ip, #6]
     d04:	e1ce90b6 	strh	r9, [lr, #6]
     d08:	e3a07f96 	mov	r7, #600	; 0x258
     d0c:	e3a09c03 	mov	r9, #768	; 0x300
     d10:	e1c470b6 	strh	r7, [r4, #6]
     d14:	e1c590b6 	strh	r9, [r5, #6]
     d18:	e3a07d05 	mov	r7, #320	; 0x140
     d1c:	e3a09d0a 	mov	r9, #640	; 0x280
     d20:	e1c370b4 	strh	r7, [r3, #4]
     d24:	e1c270b4 	strh	r7, [r2, #4]
     d28:	e3a03e2d 	mov	r3, #720	; 0x2d0
     d2c:	e1c190b4 	strh	r9, [r1, #4]
     d30:	e3a07e32 	mov	r7, #800	; 0x320
     d34:	e1c090b4 	strh	r9, [r0, #4]
     d38:	e3a09b01 	mov	r9, #1024	; 0x400
     d3c:	e1cc30b4 	strh	r3, [ip, #4]
     d40:	e1ce30b4 	strh	r3, [lr, #4]
     d44:	e1c470b4 	strh	r7, [r4, #4]
     d48:	e1c590b4 	strh	r9, [r5, #4]
     d4c:	e5d83029 	ldrb	r3, [r8, #41]
     d50:	e1a00006 	mov	r0, r6
     d54:	e1e03c83 	mvn	r3, r3, lsl #25
     d58:	e1e03ca3 	mvn	r3, r3, lsr #25
     d5c:	e5c83029 	strb	r3, [r8, #41]
     d60:	e5d82029 	ldrb	r2, [r8, #41]
     d64:	e59f30f4 	ldr	r3, [pc, #244]	; e60 <.text+0xe60>
     d68:	e3822002 	orr	r2, r2, #2	; 0x2
     d6c:	e5c82029 	strb	r2, [r8, #41]
     d70:	e5d81029 	ldrb	r1, [r8, #41]
     d74:	e79a2003 	ldr	r2, [sl, r3]
     d78:	e3811004 	orr	r1, r1, #4	; 0x4
     d7c:	e5882040 	str	r2, [r8, #64]
     d80:	e5c81029 	strb	r1, [r8, #41]
     d84:	e28dd008 	add	sp, sp, #8	; 0x8
     d88:	e8bd87f0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     d8c:	e59f00d0 	ldr	r0, [pc, #208]	; e64 <.text+0xe64>
     d90:	e08a0000 	add	r0, sl, r0
     d94:	ebfffffe 	bl	0 <SDL_SetError>
     d98:	e3e00000 	mvn	r0, #0	; 0x0
     d9c:	ea00035f 	b	d84 <GP2X_VideoInit+0x37c>
     da0:	e59f00c0 	ldr	r0, [pc, #192]	; e68 <.text+0xe68>
     da4:	e08a0000 	add	r0, sl, r0
     da8:	ebfffffe 	bl	0 <SDL_SetError>
     dac:	e1a00008 	mov	r0, r8
     db0:	ebfffffe 	bl	978 <GP2X_VideoQuit>
     db4:	e3e00000 	mvn	r0, #0	; 0x0
     db8:	ea00035f 	b	d84 <GP2X_VideoInit+0x37c>
     dbc:	e59f00a8 	ldr	r0, [pc, #168]	; e6c <.text+0xe6c>
     dc0:	e08a0000 	add	r0, sl, r0
     dc4:	ebfffffe 	bl	0 <SDL_SetError>
     dc8:	e3a03000 	mov	r3, #0	; 0x0
     dcc:	e1a00008 	mov	r0, r8
     dd0:	e587305c 	str	r3, [r7, #92]
     dd4:	ebfffffe 	bl	978 <GP2X_VideoQuit>
     dd8:	e1a00004 	mov	r0, r4
     ddc:	ea00035f 	b	d84 <GP2X_VideoInit+0x37c>
     de0:	e59f0088 	ldr	r0, [pc, #136]	; e70 <.text+0xe70>
     de4:	e08a0000 	add	r0, sl, r0
     de8:	ebfffffe 	bl	0 <SDL_SetError>
     dec:	e3a03000 	mov	r3, #0	; 0x0
     df0:	e1a00008 	mov	r0, r8
     df4:	e5873058 	str	r3, [r7, #88]
     df8:	ebfffffe 	bl	978 <GP2X_VideoQuit>
     dfc:	e1a00004 	mov	r0, r4
     e00:	ea00035f 	b	d84 <GP2X_VideoInit+0x37c>
     e04:	e59f0068 	ldr	r0, [pc, #104]	; e74 <.text+0xe74>
     e08:	e08a0000 	add	r0, sl, r0
     e0c:	ebfffffe 	bl	0 <SDL_SetError>
     e10:	e3a03000 	mov	r3, #0	; 0x0
     e14:	e1a00008 	mov	r0, r8
     e18:	e5873048 	str	r3, [r7, #72]
     e1c:	ebfffffe 	bl	978 <GP2X_VideoQuit>
     e20:	e1a00004 	mov	r0, r4
     e24:	ea00035f 	b	d84 <GP2X_VideoInit+0x37c>
     e28:	0000040c 	andeq	r0, r0, ip, lsl #8
	...
     e38:	03101000 	tsteq	r0, #0	; 0x0
     e3c:	004ff000 	subeq	pc, pc, r0
     e40:	e0020000 	and	r0, r2, r0
     e44:	00000904 	andeq	r0, r0, r4, lsl #18
     e48:	0000090a 	andeq	r0, r0, sl, lsl #18
     e4c:	000013fc 	streqd	r1, [r0], -ip
     e50:	00000000 	andeq	r0, r0, r0
     e54:	00002818 	andeq	r2, r0, r8, lsl r8
     e58:	000028da 	ldreqd	r2, [r0], -sl
	...

00000e78 <GP2X_CheckHWBlit>:


////
// Check if blit between surfaces can be accelerated
static int GP2X_CheckHWBlit(_THIS, SDL_Surface *src, SDL_Surface *dst)
{
     e78:	e92d4430 	stmdb	sp!, {r4, r5, sl, lr}
     e7c:	e59fa074 	ldr	sl, [pc, #116]	; ef8 <.text+0xef8>
#ifdef GP2X_DEBUG
  fprintf(stderr, "Checking accel of %p to %p\n", src, dst);
     e80:	e59f3074 	ldr	r3, [pc, #116]	; efc <.text+0xefc>
     e84:	e08fa00a 	add	sl, pc, sl
     e88:	e1a05001 	mov	r5, r1
     e8c:	e1a04002 	mov	r4, r2
     e90:	e59f1068 	ldr	r1, [pc, #104]	; f00 <.text+0xf00>
     e94:	e79a2003 	ldr	r2, [sl, r3]
     e98:	e08a1001 	add	r1, sl, r1
     e9c:	e5920000 	ldr	r0, [r2]
     ea0:	e1a03004 	mov	r3, r4
     ea4:	e1a02005 	mov	r2, r5
     ea8:	ebfffffe 	bl	0 <fprintf>
#endif
  // dst has to be HW to accelerate blits
  // can't accelerate alpha blits
  if ((dst->flags & SDL_HWSURFACE) && !(src->flags & SDL_SRCALPHA)) {
     eac:	e5943000 	ldr	r3, [r4]
    src->flags |= SDL_HWACCEL;
    src->map->hw_blit = GP2X_HWAccelBlit;
    return -1;
  } else {
    src->flags &= ~SDL_HWACCEL;
     eb0:	e3a00000 	mov	r0, #0	; 0x0
     eb4:	e3130001 	tst	r3, #1	; 0x1
     eb8:	05952000 	ldreq	r2, [r5]
     ebc:	0a0003b1 	beq	ecc <GP2X_CheckHWBlit+0x54>
     ec0:	e5952000 	ldr	r2, [r5]
     ec4:	e3120801 	tst	r2, #65536	; 0x10000
     ec8:	0a0003b4 	beq	ed8 <GP2X_CheckHWBlit+0x60>
     ecc:	e3c23c01 	bic	r3, r2, #256	; 0x100
     ed0:	e5853000 	str	r3, [r5]
    return 0;
  }
}
     ed4:	e8bd8430 	ldmia	sp!, {r4, r5, sl, pc}
     ed8:	e3822c01 	orr	r2, r2, #256	; 0x100
     edc:	e5852000 	str	r2, [r5]
     ee0:	e59f201c 	ldr	r2, [pc, #28]	; f04 <.text+0xf04>
     ee4:	e5953030 	ldr	r3, [r5, #48]
     ee8:	e79a1002 	ldr	r1, [sl, r2]
     eec:	e2400001 	sub	r0, r0, #1	; 0x1
     ef0:	e583100c 	str	r1, [r3, #12]
     ef4:	e8bd8430 	ldmia	sp!, {r4, r5, sl, pc}
     ef8:	0000006c 	andeq	r0, r0, ip, rrx
	...

00000f08 <SDL_GP2X_SetMonoColours>:

////
// Hardware accelerated fill
static int GP2X_FillHWRect(_THIS, SDL_Surface *surface,
			   SDL_Rect *area, Uint32 colour)
{
  Uint32 dstctrl, dest;
  SDL_PrivateVideoData *data = this->hidden;
#ifdef GP2X_DEBUG
  //    fprintf(stderr, "SDL: GP2X_FillHWRect %p (%d,%d)x(%d,%d) in %d\n",
  //    	  surface, area->x, area->y, area->w, area->h, colour);
#endif

  if (surface == this->screen)
    SDL_mutexP(data->hw_lock);

  switch (surface->format->BitsPerPixel) {
  case 8:
    dstctrl = MESG_DSTBPP_8 | ((area->x & 0x03) << 3);
    dest = GP2X_Phys(this, surface->pixels) +
      (area->y * surface->pitch) + (area->x);
    break;
  case 16:
    dstctrl = MESG_DSTBPP_16 | ((area->x & 0x01) << 4);
    dest = GP2X_Phys(this, surface->pixels) +
      (area->y * surface->pitch) + (area->x << 1);
    break;
  default:
    SDL_SetError("SDL: GP2X can't hardware FillRect to surface");
    return -1;
    break;
  }
  do {} while (data->fio[MESGSTATUS] & MESG_BUSY);
  data->fio[MESGDSTCTRL] = dstctrl;
  data->fio[MESGDSTADDR] = dest & ~3;
  data->fio[MESGDSTSTRIDE] = surface->pitch;
  data->fio[MESGSRCCTRL] = 0;
  data->fio[MESGPATCTRL] = MESG_PATENB | MESG_PATBPP_1;
  data->fio[MESGFORCOLOR] = colour;
  data->fio[MESGBACKCOLOR] = colour;
  data->fio[MESGSIZE] = (area->h << MESG_HEIGHT) | area->w;
  data->fio[MESGCTRL] = MESG_FFCLR | MESG_XDIR_POS | MESG_YDIR_POS | MESG_ROP_PAT;
  asm volatile ("":::"memory");
  data->fio[MESGSTATUS] = MESG_BUSY;

  GP2X_AddBusySurface(surface);

  if (surface == this->screen)
    SDL_mutexV(data->hw_lock);
  return 0;
}

////
// Accelerated blit, 1->8, 1->16, 8->8, 16->16
static int GP2X_HWAccelBlit(SDL_Surface *src, SDL_Rect *src_rect,
			    SDL_Surface *dst, SDL_Rect *dst_rect)
{
  SDL_VideoDevice *this = current_video;
  SDL_PrivateVideoData *data = this->hidden;
  int w, h, src_x, src_y, src_stride, dst_stride, dst_x, dst_y;
  Uint32 ctrl, src_start, dst_start, src_ctrl, dst_ctrl;
  Uint32 *read_addr;
#ifdef GP2X_DEBUG
  //  fprintf(stderr, "SDL: GP2X_HWBlit src:%p (%d,%d)x(%d,%d) -> %p (%d,%d)\n",
  //  	  src, src_rect->x, src_rect->y, src_rect->w, src_rect->h,
  //  	  dst, dst_rect->x, dst_rect->y);
#endif

  if (dst == this->screen)
    SDL_mutexP(data->hw_lock);

  src_x = src_rect->x;
  src_y = src_rect->y;
  dst_x = dst_rect->x;
  dst_y = dst_rect->y;
  w = src_rect->w;
  h = src_rect->h;
  src_stride = src->pitch;
  dst_stride = dst->pitch;

  // set blitter control with ROP and colourkey
  ctrl = MESG_ROP_COPY;
  if (src->flags & SDL_SRCCOLORKEY)
    ctrl |= MESG_TRANSPEN | (src->format->colorkey << MESG_TRANSPCOLOR);

  // In the case where src == dst, reverse blit direction if need be
  //  to cope with potential overlap.
  if (src != dst)
    ctrl |= MESG_XDIR_POS | MESG_YDIR_POS;
  else {
    // if src rightof dst, blit left->right else right->left
    if (src_x >= dst_x)
      ctrl |= MESG_XDIR_POS;
    else {
      src_x += w - 1;
      dst_x += w - 1;
    }
    // likewise, if src below dst blit top->bottom else bottom->top
    if (src_y >= dst_y)
      ctrl |= MESG_YDIR_POS;
    else {
      src_y += h - 1;
      dst_y += h - 1;
      src_stride = -src_stride;
      dst_stride = -dst_stride;
    }
  }

  if (dst->format->BitsPerPixel == 8) {
    dst_start = GP2X_Phys(this, dst->pixels) + (dst_y * dst->pitch) + dst_x;
    dst_ctrl = MESG_DSTBPP_8 | (dst_start & 0x03) << 3;
  } else {
    dst_start = GP2X_Phys(this, dst->pixels) +(dst_y*dst->pitch) +(dst_x<<1);
    dst_ctrl = MESG_DSTBPP_16 | (dst_start & 0x02) << 3;
  }
  do {} while (data->fio[MESGSTATUS] & MESG_BUSY);
  data->fio[MESGDSTCTRL] = dst_ctrl;
  data->fio[MESGDSTADDR] = dst_start & ~3;
  data->fio[MESGDSTSTRIDE] = dst_stride;
  data->fio[MESGFORCOLOR] = data->src_foreground;
  data->fio[MESGBACKCOLOR] = data->src_background;
  data->fio[MESGPATCTRL] = 0;
  data->fio[MESGSIZE] = (h << MESG_HEIGHT) | w;
  data->fio[MESGCTRL] = MESG_FFCLR | ctrl;

  ////// STILL TO CHECK SW->HW BLIT & 1bpp BLIT
  if (src->flags & SDL_HWSURFACE) {
    // src HW surface needs mapping from virtual -> physical
    switch (src->format->BitsPerPixel) {
    case 1:
      src_start = GP2X_Phys(this, src->pixels) +(src_y*src->pitch) +(src_x>>3);
      src_ctrl = MESG_SRCBPP_1 | (src_x & 0x1f);
      break;
    case 8:
      src_start = GP2X_Phys(this, src->pixels) + (src_y * src->pitch) + src_x;
      src_ctrl = MESG_SRCBPP_8 | (src_start & 0x03) << 3;
      break;
    case 16:
      src_start = GP2X_Phys(this, src->pixels) +(src_y*src->pitch) +(src_x<<1);
      src_ctrl = MESG_SRCBPP_16 | (src_start & 0x02) << 3;
      break;
    default:
      SDL_SetError("Invalid bit depth for GP2X_HWBlit");
      return -1;
    }
    data->fio[MESGSRCCTRL] = src_ctrl | MESG_SRCENB | MESG_INVIDEO;
    data->fio[MESGSRCADDR] = src_start & ~3;
    data->fio[MESGSRCSTRIDE] = src_stride;
    asm volatile ("":::"memory");
    data->fio[MESGSTATUS] = MESG_BUSY;
  } else {
    // src SW surface needs CPU to pump blitter
    int src_int_width, bitnum, frac;
    fprintf(stderr, "SW->HW blit in %d bpp\n", src->format->BitsPerPixel);
    switch (src->format->BitsPerPixel) {
    case 1:
      src_start = (Uint32)src->pixels + (src_y * src->pitch) + (src_x >> 3);
      frac = src_x & 0x1f;
      src_ctrl = MESG_SRCENB | MESG_SRCBPP_1 | frac;
      src_int_width = (frac + w + 31) / 32;
      break;
    case 8:
      src_start = (Uint32)src->pixels + (src_y * src->pitch) + src_x;
      frac = (src_start & 0x03) << 3;
      src_ctrl = MESG_SRCENB | MESG_SRCBPP_8 | frac;
      src_int_width = (frac + w*8 + 31) / 32;
      break;
    case 16:
      src_start = (Uint32)src->pixels + (src_y * src->pitch) + (src_x << 1);
      frac = (src_start & 0x02) << 3;
      src_ctrl = MESG_SRCENB | MESG_SRCBPP_16 | frac;
      src_int_width = (frac + w*16 + 31) / 32;
      break;
    default:
      SDL_SetError("Invalid bit depth for GP2X_HWBlit");
      return -1;
    }
    data->fio[MESGSRCCTRL] = src_ctrl;
    asm volatile ("":::"memory");
    data->fio[MESGSTATUS] = MESG_BUSY;

    while (--h) {
      int i = src_int_width;
      read_addr = (Uint32 *)(src_start & ~3);
      src_start += src_stride;
      if (ctrl & MESG_XDIR_POS)
	while (--i)
	  data->fio[MESGFIFO] = 0xff; //*read_addr++;
      else
	while (--i)
	  data->fio[MESGFIFO] = 0x80; //*read_addr--;
    }
  }

  GP2X_AddBusySurface(src);
  GP2X_AddBusySurface(dst);

  if (dst == this->screen)
    SDL_mutexV(data->hw_lock);

  return 0;
}

////////
// GP2X specific functions -

////
// Set foreground & background colours for 1bpp blits
void SDL_GP2X_SetMonoColours(int background, int foreground)
{
     f08:	e52da004 	str	sl, [sp, #-4]!
     f0c:	e59fa024 	ldr	sl, [pc, #36]	; f38 <.text+0xf38>
  if (current_video) {
     f10:	e59f3024 	ldr	r3, [pc, #36]	; f3c <.text+0xf3c>
     f14:	e08fa00a 	add	sl, pc, sl
     f18:	e79a2003 	ldr	r2, [sl, r3]
     f1c:	e5922000 	ldr	r2, [r2]
     f20:	e3520000 	cmp	r2, #0	; 0x0
    current_video->hidden->src_foreground = foreground;
     f24:	1592322c 	ldrne	r3, [r2, #556]
    current_video->hidden->src_background = background;
     f28:	11c304b6 	strneh	r0, [r3, #70]
     f2c:	11c314b4 	strneh	r1, [r3, #68]
  }
}
     f30:	e8bd0400 	ldmia	sp!, {sl}
     f34:	e12fff1e 	bx	lr
     f38:	0000001c 	andeq	r0, r0, ip, lsl r0
     f3c:	00000000 	andeq	r0, r0, r0

00000f40 <SDL_GP2X_GetPhysicalScreenSize>:

////
// Enquire physical screen size - for detecting LCD / TV
//  Returns 0: Progressive
//          1: Interlaced
int SDL_GP2X_GetPhysicalScreenSize(SDL_Rect *size)
{
     f40:	e52da004 	str	sl, [sp, #-4]!
     f44:	e59fa03c 	ldr	sl, [pc, #60]	; f88 <.text+0xf88>
  if (current_video) {
     f48:	e59f303c 	ldr	r3, [pc, #60]	; f8c <.text+0xf8c>
     f4c:	e08fa00a 	add	sl, pc, sl
     f50:	e79a2003 	ldr	r2, [sl, r3]
     f54:	e5922000 	ldr	r2, [r2]
     f58:	e3e01000 	mvn	r1, #0	; 0x0
     f5c:	e3520000 	cmp	r2, #0	; 0x0
     f60:	0a0003dd 	beq	f7c <SDL_GP2X_GetPhysicalScreenSize+0x3c>
    SDL_PrivateVideoData *data = current_video->hidden;
     f64:	e592322c 	ldr	r3, [r2, #556]
    size->w = data->phys_width;
    size->h = data->phys_height;
     f68:	e1d322b0 	ldrh	r2, [r3, #32]
    return data->phys_ilace;
     f6c:	e5931028 	ldr	r1, [r3, #40]
     f70:	e1c020b6 	strh	r2, [r0, #6]
     f74:	e1d321bc 	ldrh	r2, [r3, #28]
     f78:	e1c020b4 	strh	r2, [r0, #4]
  }
  return -1;
}
     f7c:	e1a00001 	mov	r0, r1
     f80:	e8bd0400 	ldmia	sp!, {sl}
     f84:	e12fff1e 	bx	lr
     f88:	00000034 	andeq	r0, r0, r4, lsr r0
     f8c:	00000000 	andeq	r0, r0, r0

00000f90 <GP2X_CreateWMCursor>:

////
// Dynamic screen scaling
void SDL_GP2X_Display(SDL_Rect *area)
{
  SDL_PrivateVideoData *data = current_video->hidden;
  int sc_x, sc_y;

  // If top-left is out of bounds then correct it
  if (area->x < 0)
    area->x = 0;
  if (area->x > (data->w - 8))
    area->x = data->w - 8;
  if (area->y < 0)
    area->y = 0;
  if (area->y > (data->h - 8))
    area->y = data->h - 8;
  // if requested area is wider than screen, reduce width
  if (data->w < (area->x + area->w))
    area->w = data->w - area->x;
  // if requested area is taller than screen, reduce height
  if (data->h < (area->y + area->h))
    area->h = data->h - area->y;

  sc_x = (1024 * area->w) / data->phys_width;
  sc_y = (area->h * data->pitch) / data->phys_height;
  // Evil hacky thing. Scaler only works if horiz needs scaling.
  // If requested scale only needs to scale in vertical, fudge horiz
  if ((sc_x == 1024) && (area->h != data->phys_height))
    sc_x++;

  data->scale_x = sc_x;
  data->scale_y = sc_y;
  data->x_offset = area->x;
  data->y_offset = area->y;
  data->ptr_offset = ((area->y * data->pitch) +
		      (area->x * current_video->info.vfmt->BytesPerPixel)) & ~3;

  // Apply immediately if we're not double-buffered
  if (!(current_video->screen->flags & SDL_DOUBLEBUF)) {
    char *pixeldata = data->buffer_addr[data->buffer_showing]+data->ptr_offset;
    if (data->phys_ilace) {
      data->io[MLC_STL_OADRL] = GP2X_PhysL(current_video, pixeldata);
      data->io[MLC_STL_OADRH] = GP2X_PhysH(current_video, pixeldata);
      if (data->w == 720) pixeldata += data->pitch;
    }
    data->io[MLC_STL_EADRL] = GP2X_PhysL(current_video, pixeldata);
    data->io[MLC_STL_EADRH] = GP2X_PhysH(current_video, pixeldata);
    data->io[MLC_STL_HSC] = data->scale_x;
    data->io[MLC_STL_VSCL] = data->scale_y & 0xffff;
    data->io[MLC_STL_VSCH] = data->scale_y >> 16;
  }
}

////
// window routines - 

////
// HW cursor support
static WMcursor *GP2X_CreateWMCursor(SDL_VideoDevice *video,
				     Uint8 *data, Uint8 *mask,
				     int w, int h,
				     int hot_x, int hot_y)
{
     f90:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f94:	e59fa1e8 	ldr	sl, [pc, #488]	; 1184 <.text+0x1184>
  SDL_PrivateVideoData *pvd = video->hidden;
  int cursor_size, cursor_dimension, x, y, i;
  Uint16 *cur_addr;
  Uint32 pixel;
  Uint8 datab, maskb;
  SDL_WMcursor *cursor;
#ifdef GP2X_DEBUG
  fputs("SDL_GP2X: Creating cursor\n", stderr);
     f98:	e59fc1e8 	ldr	ip, [pc, #488]	; 1188 <.text+0x1188>
     f9c:	e24dd010 	sub	sp, sp, #16	; 0x10
     fa0:	e08fa00a 	add	sl, pc, sl
     fa4:	e58dc000 	str	ip, [sp]
     fa8:	e1a05000 	mov	r5, r0
     fac:	e79ac00c 	ldr	ip, [sl, ip]
     fb0:	e59f01d4 	ldr	r0, [pc, #468]	; 118c <.text+0x118c>
     fb4:	e595e22c 	ldr	lr, [r5, #556]
     fb8:	e1a07003 	mov	r7, r3
     fbc:	e1a09001 	mov	r9, r1
     fc0:	e59c3000 	ldr	r3, [ip]
     fc4:	e3a01001 	mov	r1, #1	; 0x1
     fc8:	e1a08002 	mov	r8, r2
     fcc:	e08a0000 	add	r0, sl, r0
     fd0:	e3a0201a 	mov	r2, #26	; 0x1a
     fd4:	e58de008 	str	lr, [sp, #8]
     fd8:	ebfffffe 	bl	0 <fwrite>
#endif

  // HW only supports 32x32 or 64x64. Pick smallest possible or crop
  cursor_dimension = ((w < h) ? h : w) <= 32 ? 32 : 64;
     fdc:	e59d3034 	ldr	r3, [sp, #52]
  cursor_size = cursor_dimension * cursor_dimension / 4;
  if (!(cursor = (SDL_WMcursor*)malloc(sizeof *cursor))) {
     fe0:	e3a00014 	mov	r0, #20	; 0x14
     fe4:	e1570003 	cmp	r7, r3
     fe8:	a1a03007 	movge	r3, r7
     fec:	e3530020 	cmp	r3, #32	; 0x20
     ff0:	d3a01b01 	movle	r1, #1024	; 0x400
     ff4:	c3a01a01 	movgt	r1, #4096	; 0x1000
     ff8:	d3a0b020 	movle	fp, #32	; 0x20
     ffc:	c3a0b040 	movgt	fp, #64	; 0x40
    1000:	e1a04121 	mov	r4, r1, lsr #2
    1004:	ebfffffe 	bl	0 <malloc>
    1008:	e2506000 	subs	r6, r0, #0	; 0x0
    100c:	0a00045c 	beq	1178 <GP2X_CreateWMCursor+0x1e8>
    SDL_OutOfMemory();
    return NULL;
  }
#ifdef GP2X_DEBUG
  fprintf(stderr, "SDL_GP2X: Allocated WMcursor @ %p (%d)\n",
    1010:	e59d1000 	ldr	r1, [sp]
    1014:	e1a02006 	mov	r2, r6
    1018:	e79a1001 	ldr	r1, [sl, r1]
    101c:	e1a0300b 	mov	r3, fp
    1020:	e58d1004 	str	r1, [sp, #4]
    1024:	e59dc004 	ldr	ip, [sp, #4]
    1028:	e59f1160 	ldr	r1, [pc, #352]	; 1190 <.text+0x1190>
    102c:	e59c0000 	ldr	r0, [ip]
    1030:	e08a1001 	add	r1, sl, r1
    1034:	ebfffffe 	bl	0 <fprintf>
	  cursor, cursor_dimension);
#endif

  if (!(cursor->bucket = GP2X_SurfaceAllocate(video, cursor_size))) {
    1038:	e1a01004 	mov	r1, r4
    103c:	e1a00005 	mov	r0, r5
    1040:	ebfffffe 	bl	4a4 <GP2X_SurfaceAllocate>
    1044:	e3500000 	cmp	r0, #0	; 0x0
    1048:	e1a04000 	mov	r4, r0
    104c:	e5860000 	str	r0, [r6]
    1050:	0a000458 	beq	1168 <GP2X_CreateWMCursor+0x1d8>
    free(cursor);
    return NULL;
  }
#ifdef GP2X_DEBUG
  fprintf(stderr, "SDL_GP2X: Allocated cursor bucket @ %p\n", cursor->bucket);
    1054:	e59de004 	ldr	lr, [sp, #4]
    1058:	e59f1134 	ldr	r1, [pc, #308]	; 1194 <.text+0x1194>
    105c:	e59e0000 	ldr	r0, [lr]
    1060:	e08a1001 	add	r1, sl, r1
    1064:	e1a02004 	mov	r2, r4
    1068:	ebfffffe 	bl	0 <fprintf>
#endif

  cursor->dimension = cursor_dimension;
  cursor->fgr = 0xffff;
  cursor->fb = 0xff;
  cursor->bgr = 0x0000;
  cursor->bb = 0x00;
  cursor->falpha = 0xf;
  cursor->balpha = 0xf;

  if (pvd->phys_ilace) {
    106c:	e59d1008 	ldr	r1, [sp, #8]
    1070:	e586b004 	str	fp, [r6, #4]
    1074:	e5912028 	ldr	r2, [r1, #40]
    1078:	e3a0e000 	mov	lr, #0	; 0x0
    107c:	e3a0100f 	mov	r1, #15	; 0xf
    1080:	e3e03000 	mvn	r3, #0	; 0x0
    1084:	e3a0c0ff 	mov	ip, #255	; 0xff
    1088:	e3520000 	cmp	r2, #0	; 0x0
    108c:	e1c630b8 	strh	r3, [r6, #8]
    1090:	e1c6c0ba 	strh	ip, [r6, #10]
    1094:	e1c6e0bc 	strh	lr, [r6, #12]
    1098:	e1c6e0be 	strh	lr, [r6, #14]
    109c:	e1c611b0 	strh	r1, [r6, #16]
    10a0:	e1c611b2 	strh	r1, [r6, #18]
    10a4:	1a00043e 	bne	1100 <GP2X_CreateWMCursor+0x170>
  } else {
    cur_addr = (Uint16*)cursor->bucket->base;
    for (y = 0; y < h; y++) {
    10a8:	e59dc034 	ldr	ip, [sp, #52]
    10ac:	e5963000 	ldr	r3, [r6]
    10b0:	e35c0000 	cmp	ip, #0	; 0x0
    10b4:	e5934008 	ldr	r4, [r3, #8]
    10b8:	c58d200c 	strgt	r2, [sp, #12]
    10bc:	da00043e 	ble	1100 <GP2X_CreateWMCursor+0x170>
      for (x = 0; x < w; x += 8) {
    10c0:	e3570000 	cmp	r7, #0	; 0x0
    10c4:	d3a03000 	movle	r3, #0	; 0x0
    10c8:	ca000441 	bgt	110c <GP2X_CreateWMCursor+0x17c>
	datab = *data++;
	maskb = *mask++;
	pixel = 0;
	for (i = 8; i; i--) {
	  pixel <<= 2;
	  if (maskb & 0x80)
	    pixel |= 0x1;
	  if (datab & 0x80)
	    pixel |= 0x2;
	  maskb <<= 1;
	  datab <<= 1;
	}
	*cur_addr++ = pixel;
      }
      while (x < cursor_dimension) {
    10cc:	e15b0003 	cmp	fp, r3
    10d0:	da000438 	ble	10e8 <GP2X_CreateWMCursor+0x158>
	*cur_addr++ = 0;
	x += 8;
    10d4:	e2833008 	add	r3, r3, #8	; 0x8
    10d8:	e3a0e000 	mov	lr, #0	; 0x0
    10dc:	e15b0003 	cmp	fp, r3
    10e0:	e0c4e0b2 	strh	lr, [r4], #2
    10e4:	ca000433 	bgt	10d4 <GP2X_CreateWMCursor+0x144>
    10e8:	e59d100c 	ldr	r1, [sp, #12]
    10ec:	e59d2034 	ldr	r2, [sp, #52]
    10f0:	e2811001 	add	r1, r1, #1	; 0x1
    10f4:	e1520001 	cmp	r2, r1
    10f8:	e58d100c 	str	r1, [sp, #12]
    10fc:	1a00042e 	bne	10c0 <GP2X_CreateWMCursor+0x130>
      }
    }
  }
  return (WMcursor*)cursor;
    1100:	e1a00006 	mov	r0, r6
}
    1104:	e28dd010 	add	sp, sp, #16	; 0x10
    1108:	e8bd8ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    110c:	e3a05000 	mov	r5, #0	; 0x0
    1110:	e4d91001 	ldrb	r1, [r9], #1
    1114:	e7d82005 	ldrb	r2, [r8, r5]
    1118:	e3a0c000 	mov	ip, #0	; 0x0
    111c:	e3a0e008 	mov	lr, #8	; 0x8
    1120:	e3120080 	tst	r2, #128	; 0x80
    1124:	e1a0c10c 	mov	ip, ip, lsl #2
    1128:	138cc001 	orrne	ip, ip, #1	; 0x1
    112c:	e3110080 	tst	r1, #128	; 0x80
    1130:	e1a03082 	mov	r3, r2, lsl #1
    1134:	e1a00081 	mov	r0, r1, lsl #1
    1138:	138cc002 	orrne	ip, ip, #2	; 0x2
    113c:	e25ee001 	subs	lr, lr, #1	; 0x1
    1140:	e20320ff 	and	r2, r3, #255	; 0xff
    1144:	e20010ff 	and	r1, r0, #255	; 0xff
    1148:	1a000446 	bne	1120 <GP2X_CreateWMCursor+0x190>
    114c:	e2855001 	add	r5, r5, #1	; 0x1
    1150:	e1a03185 	mov	r3, r5, lsl #3
    1154:	e1570003 	cmp	r7, r3
    1158:	e0c4c0b2 	strh	ip, [r4], #2
    115c:	ca000442 	bgt	1110 <GP2X_CreateWMCursor+0x180>
    1160:	e0888005 	add	r8, r8, r5
    1164:	ea000431 	b	10cc <GP2X_CreateWMCursor+0x13c>
    1168:	e1a00006 	mov	r0, r6
    116c:	ebfffffe 	bl	0 <free>
    1170:	e1a00004 	mov	r0, r4
    1174:	ea00043f 	b	1104 <GP2X_CreateWMCursor+0x174>
    1178:	ebfffffe 	bl	0 <SDL_Error>
    117c:	e1a00006 	mov	r0, r6
    1180:	ea00043f 	b	1104 <GP2X_CreateWMCursor+0x174>
    1184:	000001dc 	ldreqd	r0, [r0], -ip
	...

00001198 <GP2X_FreeWMCursor>:

////
//
static void GP2X_FreeWMCursor(_THIS, WMcursor *wmcursor)
{
    1198:	e92d4430 	stmdb	sp!, {r4, r5, sl, lr}
    119c:	e59fa040 	ldr	sl, [pc, #64]	; 11e4 <.text+0x11e4>
  SDL_WMcursor *cursor = (SDL_WMcursor*)wmcursor;
#ifdef GP2X_DEBUG
  fprintf(stderr, "SDL_GP2X: Freeing cursor %p\n", cursor);
    11a0:	e59f3040 	ldr	r3, [pc, #64]	; 11e8 <.text+0x11e8>
    11a4:	e08fa00a 	add	sl, pc, sl
    11a8:	e1a05001 	mov	r5, r1
    11ac:	e79a2003 	ldr	r2, [sl, r3]
    11b0:	e59f1034 	ldr	r1, [pc, #52]	; 11ec <.text+0x11ec>
    11b4:	e1a04000 	mov	r4, r0
    11b8:	e08a1001 	add	r1, sl, r1
    11bc:	e5920000 	ldr	r0, [r2]
    11c0:	e1a02005 	mov	r2, r5
    11c4:	ebfffffe 	bl	0 <fprintf>
#endif
  if (cursor->bucket)
    11c8:	e5951000 	ldr	r1, [r5]
    GP2X_SurfaceFree(this, cursor->bucket);
    11cc:	e1a00004 	mov	r0, r4
    11d0:	e3510000 	cmp	r1, #0	; 0x0
    11d4:	1bfffffe 	blne	624 <GP2X_SurfaceFree>
  free(cursor);
    11d8:	e1a00005 	mov	r0, r5
}
    11dc:	e8bd4430 	ldmia	sp!, {r4, r5, sl, lr}
    11e0:	eafffffe 	b	0 <free>
    11e4:	00000038 	andeq	r0, r0, r8, lsr r0
	...

000011f0 <GP2X_ShowWMCursor>:

////
//
static int GP2X_ShowWMCursor(_THIS, WMcursor *wmcursor)
{
    11f0:	e92d45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
    11f4:	e59fa158 	ldr	sl, [pc, #344]	; 1354 <.text+0x1354>
  SDL_PrivateVideoData *data = this->hidden;
  unsigned short volatile *io = data->io;
  SDL_WMcursor *cursor = (SDL_WMcursor*)wmcursor;
#ifdef GP2X_DEBUG
  fprintf(stderr, "SDL_GP2X: Showing cursor %p\n", wmcursor);
    11f8:	e59f3158 	ldr	r3, [pc, #344]	; 1358 <.text+0x1358>
    11fc:	e08fa00a 	add	sl, pc, sl
    1200:	e1a05001 	mov	r5, r1
    1204:	e79a4003 	ldr	r4, [sl, r3]
    1208:	e59f114c 	ldr	r1, [pc, #332]	; 135c <.text+0x135c>
    120c:	e590622c 	ldr	r6, [r0, #556]
    1210:	e08a1001 	add	r1, sl, r1
    1214:	e24dd008 	sub	sp, sp, #8	; 0x8
    1218:	e1a08000 	mov	r8, r0
    121c:	e1a02005 	mov	r2, r5
    1220:	e5940000 	ldr	r0, [r4]
    1224:	e5967058 	ldr	r7, [r6, #88]
    1228:	ebfffffe 	bl	0 <fprintf>
#endif
  if (cursor) {
#ifdef GP2X_DEBUG
    fprintf(stderr, "fgr = %x, fb = %x, bgr = %x, bb = %x\n",
    122c:	e59f112c 	ldr	r1, [pc, #300]	; 1360 <.text+0x1360>
    1230:	e3550000 	cmp	r5, #0	; 0x0
    1234:	e08a1001 	add	r1, sl, r1
    1238:	1a000495 	bne	125c <GP2X_ShowWMCursor+0x6c>
	    cursor->fgr, cursor->fb, cursor->bgr, cursor->bb);
#endif 
    io[MLC_HWC_OADRL] = io[MLC_HWC_EADRL] =
      GP2X_PhysL(this, cursor->bucket->base);
    io[MLC_HWC_OADRH] = io[MLC_HWC_EADRH] =
      GP2X_PhysH(this, cursor->bucket->base);
    io[MLC_HWC_FGR] = cursor->fgr;
    io[MLC_HWC_FB] = cursor->fb;
    io[MLC_HWC_BGR] = cursor->bgr;
    io[MLC_HWC_BB] = cursor->bb;
    io[MLC_HWC_CNTL] = (cursor->falpha << 12) |
      (cursor->balpha << 8) |
      cursor->dimension;
    data->io[MLC_OVLAY_CNTL] |= DISP_CURSOR;
    return -1;
  } else
    data->io[MLC_OVLAY_CNTL] &= ~DISP_CURSOR;
    123c:	e5962058 	ldr	r2, [r6, #88]
    1240:	e1a00005 	mov	r0, r5
    1244:	e2822da2 	add	r2, r2, #10368	; 0x2880
    1248:	e1d230b0 	ldrh	r3, [r2]
    124c:	e2033b3f 	and	r3, r3, #64512	; 0xfc00
    1250:	e1c230b0 	strh	r3, [r2]
  return 0;
}
    1254:	e28dd008 	add	sp, sp, #8	; 0x8
    1258:	e8bd85f0 	ldmia	sp!, {r4, r5, r6, r7, r8, sl, pc}
    125c:	e5940000 	ldr	r0, [r4]
    1260:	e1d5c0bc 	ldrh	ip, [r5, #12]
    1264:	e1d540be 	ldrh	r4, [r5, #14]
    1268:	e1d520b8 	ldrh	r2, [r5, #8]
    126c:	e1d530ba 	ldrh	r3, [r5, #10]
    1270:	e58dc000 	str	ip, [sp]
    1274:	e58d4004 	str	r4, [sp, #4]
    1278:	ebfffffe 	bl	0 <fprintf>
    127c:	e598322c 	ldr	r3, [r8, #556]
    1280:	e5951000 	ldr	r1, [r5]
    1284:	e5930048 	ldr	r0, [r3, #72]
    1288:	e5912008 	ldr	r2, [r1, #8]
    128c:	e59fc0d0 	ldr	ip, [pc, #208]	; 1364 <.text+0x1364>
    1290:	e0602002 	rsb	r2, r0, r2
    1294:	e2823a01 	add	r3, r2, #4096	; 0x1000
    1298:	e1a03803 	mov	r3, r3, lsl #16
    129c:	e1a03823 	mov	r3, r3, lsr #16
    12a0:	e18730bc 	strh	r3, [r7, ip]
    12a4:	e19710bc 	ldrh	r1, [r7, ip]
    12a8:	e2822631 	add	r2, r2, #51380224	; 0x3100000
    12ac:	e59f00b4 	ldr	r0, [pc, #180]	; 1368 <.text+0x1368>
    12b0:	e59f30b4 	ldr	r3, [pc, #180]	; 136c <.text+0x136c>
    12b4:	e1a01801 	mov	r1, r1, lsl #16
    12b8:	e2822a01 	add	r2, r2, #4096	; 0x1000
    12bc:	e1a01821 	mov	r1, r1, lsr #16
    12c0:	e1a02822 	mov	r2, r2, lsr #16
    12c4:	e18710b3 	strh	r1, [r7, r3]
    12c8:	e18720b0 	strh	r2, [r7, r0]
    12cc:	e19730b0 	ldrh	r3, [r7, r0]
    12d0:	e59f2098 	ldr	r2, [pc, #152]	; 1370 <.text+0x1370>
    12d4:	e1a03803 	mov	r3, r3, lsl #16
    12d8:	e1a03823 	mov	r3, r3, lsr #16
    12dc:	e18730b2 	strh	r3, [r7, r2]
    12e0:	e1d510b8 	ldrh	r1, [r5, #8]
    12e4:	e59f3088 	ldr	r3, [pc, #136]	; 1374 <.text+0x1374>
    12e8:	e18710b3 	strh	r1, [r7, r3]
    12ec:	e1d520ba 	ldrh	r2, [r5, #10]
    12f0:	e2833002 	add	r3, r3, #2	; 0x2
    12f4:	e18720b3 	strh	r2, [r7, r3]
    12f8:	e1d510bc 	ldrh	r1, [r5, #12]
    12fc:	e2833002 	add	r3, r3, #2	; 0x2
    1300:	e18710b3 	strh	r1, [r7, r3]
    1304:	e1d500be 	ldrh	r0, [r5, #14]
    1308:	e59f2068 	ldr	r2, [pc, #104]	; 1378 <.text+0x1378>
    130c:	e5951004 	ldr	r1, [r5, #4]
    1310:	e18700b2 	strh	r0, [r7, r2]
    1314:	e1d531b2 	ldrh	r3, [r5, #18]
    1318:	e1d521b0 	ldrh	r2, [r5, #16]
    131c:	e1a03403 	mov	r3, r3, lsl #8
    1320:	e1833602 	orr	r3, r3, r2, lsl #12
    1324:	e1833001 	orr	r3, r3, r1
    1328:	e1a03803 	mov	r3, r3, lsl #16
    132c:	e5961058 	ldr	r1, [r6, #88]
    1330:	e59f2044 	ldr	r2, [pc, #68]	; 137c <.text+0x137c>
    1334:	e1a03823 	mov	r3, r3, lsr #16
    1338:	e18730b2 	strh	r3, [r7, r2]
    133c:	e2811da2 	add	r1, r1, #10368	; 0x2880
    1340:	e1d130b0 	ldrh	r3, [r1]
    1344:	e3e00000 	mvn	r0, #0	; 0x0
    1348:	e3833c02 	orr	r3, r3, #512	; 0x200
    134c:	e1c130b0 	strh	r3, [r1]
    1350:	ea000493 	b	1254 <GP2X_ShowWMCursor+0x64>
    1354:	00000150 	andeq	r0, r0, r0, asr r1
	...
    1364:	00009230 	andeq	r9, r0, r0, lsr r2
    1368:	00002932 	andeq	r2, r0, r2, lsr r9
    136c:	0000292c 	andeq	r2, r0, ip, lsr #18
    1370:	0000292e 	andeq	r2, r0, lr, lsr #18
    1374:	00002924 	andeq	r2, r0, r4, lsr #18
    1378:	0000292a 	andeq	r2, r0, sl, lsr #18
    137c:	0000291e 	andeq	r2, r0, lr, lsl r9

00001380 <GP2X_WarpWMCursor>:

////
//
static void GP2X_WarpWMCursor(_THIS, Uint16 x, Uint16 y)
{
  SDL_PrivateVideoData *data = this->hidden;
    1380:	e590322c 	ldr	r3, [r0, #556]
    1384:	e1a01801 	mov	r1, r1, lsl #16

  data->io[MLC_HWC_STX] = x;
    1388:	e5930058 	ldr	r0, [r3, #88]
    138c:	e59f3018 	ldr	r3, [pc, #24]	; 13ac <.text+0x13ac>
    1390:	e1a01821 	mov	r1, r1, lsr #16
    1394:	e18010b3 	strh	r1, [r0, r3]
    1398:	e1a02802 	mov	r2, r2, lsl #16
  data->io[MLC_HWC_STY] = y;
    139c:	e59f100c 	ldr	r1, [pc, #12]	; 13b0 <.text+0x13b0>
    13a0:	e1a02822 	mov	r2, r2, lsr #16
    13a4:	e18020b1 	strh	r2, [r0, r1]
}
    13a8:	e12fff1e 	bx	lr
    13ac:	00002920 	andeq	r2, r0, r0, lsr #18
    13b0:	00002922 	andeq	r2, r0, r2, lsr #18

000013b4 <GP2X_MoveWMCursor>:

////
//
static void GP2X_MoveWMCursor(_THIS, int x, int y)
{
    13b4:	e92d4470 	stmdb	sp!, {r4, r5, r6, sl, lr}
    13b8:	e59fa048 	ldr	sl, [pc, #72]	; 1408 <.text+0x1408>
#ifdef GP2X_DEBUG
  fprintf(stderr, "SDL_GP2X: Move cursor to %d,%d\n", x, y);
    13bc:	e59f3048 	ldr	r3, [pc, #72]	; 140c <.text+0x140c>
    13c0:	e08fa00a 	add	sl, pc, sl
    13c4:	e1a04001 	mov	r4, r1
    13c8:	e1a05002 	mov	r5, r2
    13cc:	e59f103c 	ldr	r1, [pc, #60]	; 1410 <.text+0x1410>
    13d0:	e79a2003 	ldr	r2, [sl, r3]
    13d4:	e1a06000 	mov	r6, r0
    13d8:	e08a1001 	add	r1, sl, r1
    13dc:	e1a03005 	mov	r3, r5
    13e0:	e5920000 	ldr	r0, [r2]
    13e4:	e1a02004 	mov	r2, r4
    13e8:	ebfffffe 	bl	0 <fprintf>
#endif
  GP2X_WarpWMCursor(this, x, y);
    13ec:	e1a04804 	mov	r4, r4, lsl #16
    13f0:	e1a05805 	mov	r5, r5, lsl #16
    13f4:	e1a00006 	mov	r0, r6
    13f8:	e1a01824 	mov	r1, r4, lsr #16
    13fc:	e1a02825 	mov	r2, r5, lsr #16
}
    1400:	e8bd4470 	ldmia	sp!, {r4, r5, r6, sl, lr}
    1404:	eafffffe 	b	1380 <GP2X_WarpWMCursor>
    1408:	00000040 	andeq	r0, r0, r0, asr #32
	...

00001414 <GP2X_FillHWRect>:
    1414:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1418:	e1a07000 	mov	r7, r0
    141c:	e59000bc 	ldr	r0, [r0, #188]
    1420:	e59fa154 	ldr	sl, [pc, #340]	; 157c <.text+0x157c>
    1424:	e1500001 	cmp	r0, r1
    1428:	e08fa00a 	add	sl, pc, sl
    142c:	e1a05001 	mov	r5, r1
    1430:	e1a06002 	mov	r6, r2
    1434:	e1a0b003 	mov	fp, r3
    1438:	e597822c 	ldr	r8, [r7, #556]
    143c:	0a00055a 	beq	1570 <GP2X_FillHWRect+0x15c>
    1440:	e5953004 	ldr	r3, [r5, #4]
    1444:	e5d33004 	ldrb	r3, [r3, #4]
    1448:	e3530008 	cmp	r3, #8	; 0x8
    144c:	0a000519 	beq	146c <GP2X_FillHWRect+0x58>
    1450:	e3530010 	cmp	r3, #16	; 0x10
    1454:	0a00054a 	beq	1530 <GP2X_FillHWRect+0x11c>
    1458:	e59f0120 	ldr	r0, [pc, #288]	; 1580 <.text+0x1580>
    145c:	e08a0000 	add	r0, sl, r0
    1460:	ebfffffe 	bl	0 <SDL_SetError>
    1464:	e3e00000 	mvn	r0, #0	; 0x0
    1468:	e8bd8ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    146c:	e597222c 	ldr	r2, [r7, #556]
    1470:	e5953014 	ldr	r3, [r5, #20]
    1474:	e5921048 	ldr	r1, [r2, #72]
    1478:	e1d600f2 	ldrsh	r0, [r6, #2]
    147c:	e0613003 	rsb	r3, r1, r3
    1480:	e2833631 	add	r3, r3, #51380224	; 0x3100000
    1484:	e1d5e1b0 	ldrh	lr, [r5, #16]
    1488:	e2833a01 	add	r3, r3, #4096	; 0x1000
    148c:	e021309e 	mla	r1, lr, r0, r3
    1490:	e1d620b0 	ldrh	r2, [r6]
    1494:	e2023003 	and	r3, r2, #3	; 0x3
    1498:	e1a02802 	mov	r2, r2, lsl #16
    149c:	e0811842 	add	r1, r1, r2, asr #16
    14a0:	e1a09183 	mov	r9, r3, lsl #3
    14a4:	e598c05c 	ldr	ip, [r8, #92]
    14a8:	e28c2034 	add	r2, ip, #52	; 0x34
    14ac:	e5923000 	ldr	r3, [r2]
    14b0:	e2134001 	ands	r4, r3, #1	; 0x1
    14b4:	1a000529 	bne	14ac <GP2X_FillHWRect+0x98>
    14b8:	e1a0380e 	mov	r3, lr, lsl #16
    14bc:	e1d600b4 	ldrh	r0, [r6, #4]
    14c0:	e1d620b6 	ldrh	r2, [r6, #6]
    14c4:	e3c11003 	bic	r1, r1, #3	; 0x3
    14c8:	e1a03823 	mov	r3, r3, lsr #16
    14cc:	e58c9000 	str	r9, [ip]
    14d0:	e58c1004 	str	r1, [ip, #4]
    14d4:	e58c3008 	str	r3, [ip, #8]
    14d8:	e3a03030 	mov	r3, #48	; 0x30
    14dc:	e58c400c 	str	r4, [ip, #12]
    14e0:	e1800802 	orr	r0, r0, r2, lsl #16
    14e4:	e58c3020 	str	r3, [ip, #32]
    14e8:	e2833d1f 	add	r3, r3, #1984	; 0x7c0
    14ec:	e58cb024 	str	fp, [ip, #36]
    14f0:	e58cb028 	str	fp, [ip, #40]
    14f4:	e58c002c 	str	r0, [ip, #44]
    14f8:	e58c3030 	str	r3, [ip, #48]
    14fc:	e59720bc 	ldr	r2, [r7, #188]
    1500:	e598005c 	ldr	r0, [r8, #92]
////
// mark surface has been used in HW accel
static inline void GP2X_AddBusySurface(SDL_Surface *surface)
{
  ((video_bucket *)surface->hwdata)->dirty = 1;
    1504:	e595101c 	ldr	r1, [r5, #28]
    1508:	e3a03001 	mov	r3, #1	; 0x1
    150c:	e1550002 	cmp	r5, r2
    1510:	e5803034 	str	r3, [r0, #52]
////
// mark surface has been used in HW accel
static inline void GP2X_AddBusySurface(SDL_Surface *surface)
{
  ((video_bucket *)surface->hwdata)->dirty = 1;
    1514:	e1c131b2 	strh	r3, [r1, #18]
    1518:	11a00004 	movne	r0, r4
    151c:	18bd8ff0 	ldmneia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1520:	e598003c 	ldr	r0, [r8, #60]
    1524:	ebfffffe 	bl	0 <SDL_mutexV>
    1528:	e1a00004 	mov	r0, r4
    152c:	e8bd8ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1530:	e597222c 	ldr	r2, [r7, #556]
    1534:	e5953014 	ldr	r3, [r5, #20]
    1538:	e5921048 	ldr	r1, [r2, #72]
    153c:	e1d600f2 	ldrsh	r0, [r6, #2]
    1540:	e0613003 	rsb	r3, r1, r3
    1544:	e2833631 	add	r3, r3, #51380224	; 0x3100000
    1548:	e1d5e1b0 	ldrh	lr, [r5, #16]
    154c:	e2833a01 	add	r3, r3, #4096	; 0x1000
    1550:	e021309e 	mla	r1, lr, r0, r3
    1554:	e1d620b0 	ldrh	r2, [r6]
    1558:	e2023001 	and	r3, r2, #1	; 0x1
    155c:	e1a03203 	mov	r3, r3, lsl #4
    1560:	e1a02802 	mov	r2, r2, lsl #16
    1564:	e08117c2 	add	r1, r1, r2, asr #15
    1568:	e3839020 	orr	r9, r3, #32	; 0x20
    156c:	ea000527 	b	14a4 <GP2X_FillHWRect+0x90>
    1570:	e598003c 	ldr	r0, [r8, #60]
    1574:	ebfffffe 	bl	0 <SDL_mutexP>
    1578:	ea00050e 	b	1440 <GP2X_FillHWRect+0x2c>
    157c:	0000014c 	andeq	r0, r0, ip, asr #2
    1580:	00000000 	andeq	r0, r0, r0

00001584 <SDL_GP2X_Display>:
    1584:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1588:	e59fa248 	ldr	sl, [pc, #584]	; 17d8 <.text+0x17d8>
    158c:	e59f3248 	ldr	r3, [pc, #584]	; 17dc <.text+0x17dc>
    1590:	e08fa00a 	add	sl, pc, sl
    1594:	e79a3003 	ldr	r3, [sl, r3]
    1598:	e24dd008 	sub	sp, sp, #8	; 0x8
    159c:	e58d3004 	str	r3, [sp, #4]
    15a0:	e5933000 	ldr	r3, [r3]
    15a4:	e1d0c0b0 	ldrh	ip, [r0]
    15a8:	e593522c 	ldr	r5, [r3, #556]
    15ac:	e31c0902 	tst	ip, #32768	; 0x8000
    15b0:	e5952010 	ldr	r2, [r5, #16]
    15b4:	13a0c000 	movne	ip, #0	; 0x0
    15b8:	e1a0380c 	mov	r3, ip, lsl #16
    15bc:	13a01000 	movne	r1, #0	; 0x0
    15c0:	e58d2000 	str	r2, [sp]
    15c4:	e2422008 	sub	r2, r2, #8	; 0x8
    15c8:	e1d0e0b2 	ldrh	lr, [r0, #2]
    15cc:	11c010b0 	strneh	r1, [r0]
    15d0:	e1520843 	cmp	r2, r3, asr #16
    15d4:	b1c020b0 	strlth	r2, [r0]
    15d8:	b1d0c0b0 	ldrlth	ip, [r0]
    15dc:	e5951014 	ldr	r1, [r5, #20]
    15e0:	e31e0902 	tst	lr, #32768	; 0x8000
    15e4:	13a0e000 	movne	lr, #0	; 0x0
    15e8:	13a03000 	movne	r3, #0	; 0x0
    15ec:	11c030b2 	strneh	r3, [r0, #2]
    15f0:	e2412008 	sub	r2, r1, #8	; 0x8
    15f4:	e1a0380e 	mov	r3, lr, lsl #16
    15f8:	e1520843 	cmp	r2, r3, asr #16
    15fc:	b1c020b2 	strlth	r2, [r0, #2]
    1600:	e1d020b4 	ldrh	r2, [r0, #4]
    1604:	e1a0880c 	mov	r8, ip, lsl #16
    1608:	e59dc000 	ldr	ip, [sp]
    160c:	b1d0e0b2 	ldrlth	lr, [r0, #2]
    1610:	e0823848 	add	r3, r2, r8, asr #16
    1614:	e15c0003 	cmp	ip, r3
    1618:	e1d040b6 	ldrh	r4, [r0, #6]
    161c:	e1a03828 	mov	r3, r8, lsr #16
    1620:	b063300c 	rsblt	r3, r3, ip
    1624:	e1a0780e 	mov	r7, lr, lsl #16
    1628:	b1c030b4 	strlth	r3, [r0, #4]
    162c:	e0843847 	add	r3, r4, r7, asr #16
    1630:	b1d020b4 	ldrlth	r2, [r0, #4]
    1634:	e1510003 	cmp	r1, r3
    1638:	e1a03827 	mov	r3, r7, lsr #16
    163c:	b0633001 	rsblt	r3, r3, r1
    1640:	b1c030b6 	strlth	r3, [r0, #6]
    1644:	b1d040b6 	ldrlth	r4, [r0, #6]
    1648:	e595101c 	ldr	r1, [r5, #28]
    164c:	e1a00502 	mov	r0, r2, lsl #10
    1650:	ebfffffe 	bl	0 <__divsi3>
    1654:	e1a03804 	mov	r3, r4, lsl #16
    1658:	e5959020 	ldr	r9, [r5, #32]
    165c:	e595b018 	ldr	fp, [r5, #24]
    1660:	e1a04823 	mov	r4, r3, lsr #16
    1664:	e1a06000 	mov	r6, r0
    1668:	e1a01009 	mov	r1, r9
    166c:	e000049b 	mul	r0, fp, r4
    1670:	ebfffffe 	bl	0 <__divsi3>
    1674:	e3560b01 	cmp	r6, #1024	; 0x400
    1678:	0a0005ef 	beq	17c4 <SDL_GP2X_Display+0x240>
    167c:	e59d1004 	ldr	r1, [sp, #4]
    1680:	e1a0c848 	mov	ip, r8, asr #16
    1684:	e5914000 	ldr	r4, [r1]
    1688:	e1a0e847 	mov	lr, r7, asr #16
    168c:	e5943030 	ldr	r3, [r4, #48]
    1690:	e5850030 	str	r0, [r5, #48]
    1694:	e585c004 	str	ip, [r5, #4]
    1698:	e585602c 	str	r6, [r5, #44]
    169c:	e585e008 	str	lr, [r5, #8]
    16a0:	e5d31005 	ldrb	r1, [r3, #5]
    16a4:	e59400bc 	ldr	r0, [r4, #188]
    16a8:	e0030c91 	mul	r3, r1, ip
    16ac:	e0223e9b 	mla	r2, fp, lr, r3
    16b0:	e3c2c003 	bic	ip, r2, #3	; 0x3
    16b4:	e585c00c 	str	ip, [r5, #12]
    16b8:	e5903000 	ldr	r3, [r0]
    16bc:	e3130101 	tst	r3, #1073741824	; 0x40000000
    16c0:	1a0005d5 	bne	175c <SDL_GP2X_Display+0x1d8>
    16c4:	e595304c 	ldr	r3, [r5, #76]
    16c8:	e5951028 	ldr	r1, [r5, #40]
    16cc:	e0853103 	add	r3, r5, r3, lsl #2
    16d0:	e5932050 	ldr	r2, [r3, #80]
    16d4:	e3510000 	cmp	r1, #0	; 0x0
    16d8:	e082000c 	add	r0, r2, ip
    16dc:	1a0005d7 	bne	1764 <SDL_GP2X_Display+0x1e0>
    16e0:	e1a03800 	mov	r3, r0, lsl #16
    16e4:	e594422c 	ldr	r4, [r4, #556]
    16e8:	e5956058 	ldr	r6, [r5, #88]
    16ec:	e1a0c000 	mov	ip, r0
    16f0:	e1a0e823 	mov	lr, r3, lsr #16
    16f4:	e5941048 	ldr	r1, [r4, #72]
    16f8:	e59f30e0 	ldr	r3, [pc, #224]	; 17e0 <.text+0x17e0>
    16fc:	e061000c 	rsb	r0, r1, ip
    1700:	e061100e 	rsb	r1, r1, lr
    1704:	e595c02c 	ldr	ip, [r5, #44]
    1708:	e2811a01 	add	r1, r1, #4096	; 0x1000
    170c:	e5954030 	ldr	r4, [r5, #48]
    1710:	e2800631 	add	r0, r0, #51380224	; 0x3100000
    1714:	e1a01801 	mov	r1, r1, lsl #16
    1718:	e59f20c4 	ldr	r2, [pc, #196]	; 17e4 <.text+0x17e4>
    171c:	e2800a01 	add	r0, r0, #4096	; 0x1000
    1720:	e1a0c80c 	mov	ip, ip, lsl #16
    1724:	e1a01821 	mov	r1, r1, lsr #16
    1728:	e18610b3 	strh	r1, [r6, r3]
    172c:	e1a0e804 	mov	lr, r4, lsl #16
    1730:	e243300c 	sub	r3, r3, #12	; 0xc
    1734:	e1a00820 	mov	r0, r0, lsr #16
    1738:	e1a0c82c 	mov	ip, ip, lsr #16
    173c:	e18600b2 	strh	r0, [r6, r2]
    1740:	e1a0e82e 	mov	lr, lr, lsr #16
    1744:	e186c0b3 	strh	ip, [r6, r3]
    1748:	e1a04824 	mov	r4, r4, lsr #16
    174c:	e242200c 	sub	r2, r2, #12	; 0xc
    1750:	e2833004 	add	r3, r3, #4	; 0x4
    1754:	e186e0b2 	strh	lr, [r6, r2]
    1758:	e18640b3 	strh	r4, [r6, r3]
    175c:	e28dd008 	add	sp, sp, #8	; 0x8
    1760:	e8bd8ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1764:	e594422c 	ldr	r4, [r4, #556]
////
// convert virtual address to physical (lower word)
static inline unsigned short GP2X_PhysL(_THIS, char *virt)
{
  return (unsigned short)(((long)virt - (long)(this->hidden->vmem) + 0x3101000) & 0xffff);
    1768:	e1a02800 	mov	r2, r0, lsl #16
    176c:	e5943048 	ldr	r3, [r4, #72]
////
// convert virtual address to physical (lower word)
static inline unsigned short GP2X_PhysL(_THIS, char *virt)
{
  return (unsigned short)(((long)virt - (long)(this->hidden->vmem) + 0x3101000) & 0xffff);
    1770:	e1a0e822 	mov	lr, r2, lsr #16
    1774:	e1a0c000 	mov	ip, r0
    1778:	e59d2000 	ldr	r2, [sp]
    177c:	e0630000 	rsb	r0, r3, r0
    1780:	e063300e 	rsb	r3, r3, lr
    1784:	e2833a01 	add	r3, r3, #4096	; 0x1000
    1788:	e3520e2d 	cmp	r2, #720	; 0x2d0
    178c:	e5956058 	ldr	r6, [r5, #88]
    1790:	e1a03803 	mov	r3, r3, lsl #16
    1794:	e59f204c 	ldr	r2, [pc, #76]	; 17e8 <.text+0x17e8>
    1798:	e1a03823 	mov	r3, r3, lsr #16
    179c:	e2800631 	add	r0, r0, #51380224	; 0x3100000
    17a0:	008cc00b 	addeq	ip, ip, fp
    17a4:	e18630b2 	strh	r3, [r6, r2]
    17a8:	e2800a01 	add	r0, r0, #4096	; 0x1000
    17ac:	e59f1038 	ldr	r1, [pc, #56]	; 17ec <.text+0x17ec>
    17b0:	01a0380c 	moveq	r3, ip, lsl #16
    17b4:	e1a00820 	mov	r0, r0, lsr #16
    17b8:	01a0e823 	moveq	lr, r3, lsr #16
    17bc:	e18600b1 	strh	r0, [r6, r1]
    17c0:	ea0005bb 	b	16f4 <SDL_GP2X_Display+0x170>
    17c4:	e59f3024 	ldr	r3, [pc, #36]	; 17f0 <.text+0x17f0>
    17c8:	e1540009 	cmp	r4, r9
    17cc:	11a06003 	movne	r6, r3
    17d0:	03a06b01 	moveq	r6, #1024	; 0x400
    17d4:	ea00059d 	b	167c <SDL_GP2X_Display+0xf8>
    17d8:	00000240 	andeq	r0, r0, r0, asr #4
    17dc:	00000000 	andeq	r0, r0, r0
    17e0:	00002912 	andeq	r2, r0, r2, lsl r9
    17e4:	00002914 	andeq	r2, r0, r4, lsl r9
    17e8:	0000290e 	andeq	r2, r0, lr, lsl #18
    17ec:	00002910 	andeq	r2, r0, r0, lsl r9
    17f0:	00000401 	andeq	r0, r0, r1, lsl #8

000017f4 <GP2X_SetVideoMode>:
    17f4:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    17f8:	e59fa410 	ldr	sl, [pc, #1040]	; 1c10 <.text+0x1c10>
    17fc:	e59f8410 	ldr	r8, [pc, #1040]	; 1c14 <.text+0x1c14>
    1800:	e08fa00a 	add	sl, pc, sl
    1804:	e79ac008 	ldr	ip, [sl, r8]
    1808:	e24dd014 	sub	sp, sp, #20	; 0x14
    180c:	e59ce000 	ldr	lr, [ip]
    1810:	e58d000c 	str	r0, [sp, #12]
    1814:	e58d8008 	str	r8, [sp, #8]
    1818:	e59d903c 	ldr	r9, [sp, #60]
    181c:	e59d8038 	ldr	r8, [sp, #56]
    1820:	e1a04002 	mov	r4, r2
    1824:	e1a0b001 	mov	fp, r1
    1828:	e59f73e8 	ldr	r7, [pc, #1000]	; 1c18 <.text+0x1c18>
    182c:	e59f13e8 	ldr	r1, [pc, #1000]	; 1c1c <.text+0x1c1c>
    1830:	e59dc00c 	ldr	ip, [sp, #12]
    1834:	e2844007 	add	r4, r4, #7	; 0x7
    1838:	e88d0300 	stmia	sp, {r8, r9}
    183c:	e0047007 	and	r7, r4, r7
    1840:	e1a0000e 	mov	r0, lr
    1844:	e08a1001 	add	r1, sl, r1
    1848:	e1a05003 	mov	r5, r3
    184c:	e59c622c 	ldr	r6, [ip, #556]
    1850:	ebfffffe 	bl	0 <fprintf>
    1854:	e357003f 	cmp	r7, #63	; 0x3f
    1858:	d3a07040 	movle	r7, #64	; 0x40
    185c:	da000618 	ble	1868 <GP2X_SetVideoMode+0x74>
    1860:	e3570b01 	cmp	r7, #1024	; 0x400
    1864:	a3a07b01 	movge	r7, #1024	; 0x400
    1868:	e355003f 	cmp	r5, #63	; 0x3f
    186c:	d3a05040 	movle	r5, #64	; 0x40
    1870:	da00061d 	ble	187c <GP2X_SetVideoMode+0x88>
    1874:	e3550c03 	cmp	r5, #768	; 0x300
    1878:	a3a05c03 	movge	r5, #768	; 0x300
    187c:	e3580008 	cmp	r8, #8	; 0x8
    1880:	c3a08010 	movgt	r8, #16	; 0x10
    1884:	d3a08008 	movle	r8, #8	; 0x8
    1888:	e58d8010 	str	r8, [sp, #16]
    188c:	e3a08000 	mov	r8, #0	; 0x0
    1890:	e1a0000b 	mov	r0, fp
    1894:	e59d1010 	ldr	r1, [sp, #16]
    1898:	e1a02008 	mov	r2, r8
    189c:	e1a03008 	mov	r3, r8
    18a0:	e58d8000 	str	r8, [sp]
    18a4:	e58d8004 	str	r8, [sp, #4]
    18a8:	ebfffffe 	bl	0 <SDL_ReallocFormat>
    18ac:	e1500008 	cmp	r0, r8
    18b0:	0a0006fd 	beq	1bfc <GP2X_SetVideoMode+0x408>
    18b4:	e59de010 	ldr	lr, [sp, #16]
    18b8:	e2099101 	and	r9, r9, #1073741824	; 0x40000000
    18bc:	e35e0008 	cmp	lr, #8	; 0x8
    18c0:	e3893186 	orr	r3, r9, #-2147483615	; 0x80000021
    18c4:	e58b3000 	str	r3, [fp]
    18c8:	e59d2010 	ldr	r2, [sp, #16]
    18cc:	0389320a 	orreq	r3, r9, #-1610612736	; 0xa0000000
    18d0:	03833021 	orreq	r3, r3, #33	; 0x21
    18d4:	058b3000 	streq	r3, [fp]
    18d8:	e1a031a2 	mov	r3, r2, lsr #3
    18dc:	e58b7008 	str	r7, [fp, #8]
    18e0:	e0020793 	mul	r2, r3, r7
    18e4:	e5867010 	str	r7, [r6, #16]
    18e8:	e58b500c 	str	r5, [fp, #12]
    18ec:	e5961028 	ldr	r1, [r6, #40]
    18f0:	e1a02802 	mov	r2, r2, lsl #16
    18f4:	e2513000 	subs	r3, r1, #0	; 0x0
    18f8:	13a03001 	movne	r3, #1	; 0x1
    18fc:	e3570e2d 	cmp	r7, #720	; 0x2d0
    1900:	13a03000 	movne	r3, #0	; 0x0
    1904:	e1a02822 	mov	r2, r2, lsr #16
    1908:	e3530000 	cmp	r3, #0	; 0x0
    190c:	11a03082 	movne	r3, r2, lsl #1
    1910:	e5862024 	str	r2, [r6, #36]
    1914:	e5964048 	ldr	r4, [r6, #72]
    1918:	15863024 	strne	r3, [r6, #36]
    191c:	e59d300c 	ldr	r3, [sp, #12]
    1920:	e1cb21b0 	strh	r2, [fp, #16]
    1924:	e5862018 	str	r2, [r6, #24]
    1928:	e5865014 	str	r5, [r6, #20]
    192c:	e583b0bc 	str	fp, [r3, #188]
    1930:	e596101c 	ldr	r1, [r6, #28]
    1934:	e58b4014 	str	r4, [fp, #20]
    1938:	e1a00507 	mov	r0, r7, lsl #10
    193c:	ebfffffe 	bl	0 <__divsi3>
    1940:	e5963018 	ldr	r3, [r6, #24]
    1944:	e586002c 	str	r0, [r6, #44]
    1948:	e0050593 	mul	r5, r3, r5
    194c:	e5961020 	ldr	r1, [r6, #32]
    1950:	e1a00005 	mov	r0, r5
    1954:	ebfffffe 	bl	0 <__divsi3>
    1958:	e265284f 	rsb	r2, r5, #5177344	; 0x4f0000
    195c:	e0841005 	add	r1, r4, r5
    1960:	e2822a0f 	add	r2, r2, #61440	; 0xf000
    1964:	e3590000 	cmp	r9, #0	; 0x0
    1968:	e5860030 	str	r0, [r6, #48]
    196c:	e5868008 	str	r8, [r6, #8]
    1970:	e5868004 	str	r8, [r6, #4]
    1974:	e586800c 	str	r8, [r6, #12]
    1978:	e586804c 	str	r8, [r6, #76]
    197c:	e5864050 	str	r4, [r6, #80]
    1980:	e5861074 	str	r1, [r6, #116]
    1984:	e586207c 	str	r2, [r6, #124]
    1988:	1a0006f4 	bne	1bd8 <GP2X_SetVideoMode+0x3e4>
    198c:	e59d000c 	ldr	r0, [sp, #12]
    1990:	ebfffffe 	bl	410 <GP2X_FreeHWSurfaces>
    1994:	e59dc008 	ldr	ip, [sp, #8]
    1998:	e596507c 	ldr	r5, [r6, #124]
    199c:	e79a300c 	ldr	r3, [sl, ip]
    19a0:	e5969074 	ldr	r9, [r6, #116]
    19a4:	e59f1274 	ldr	r1, [pc, #628]	; 1c20 <.text+0x1c20>
    19a8:	e5930000 	ldr	r0, [r3]
    19ac:	e08a1001 	add	r1, sl, r1
    19b0:	e1a02009 	mov	r2, r9
    19b4:	e1a03005 	mov	r3, r5
    19b8:	ebfffffe 	bl	0 <fprintf>
    19bc:	e59de00c 	ldr	lr, [sp, #12]
    19c0:	e3550000 	cmp	r5, #0	; 0x0
    19c4:	e59ec22c 	ldr	ip, [lr, #556]
    19c8:	d1a07008 	movle	r7, r8
    19cc:	e58c5078 	str	r5, [ip, #120]
    19d0:	e58c507c 	str	r5, [ip, #124]
    19d4:	da000681 	ble	1a0c <GP2X_SetVideoMode+0x218>
    19d8:	e3a00014 	mov	r0, #20	; 0x14
    19dc:	ebfffffe 	bl	0 <malloc>
    19e0:	e2507000 	subs	r7, r0, #0	; 0x0
    19e4:	0a0006fb 	beq	1bf4 <GP2X_SetVideoMode+0x400>
    19e8:	e59d200c 	ldr	r2, [sp, #12]
    19ec:	e1c781b2 	strh	r8, [r7, #18]
    19f0:	e592c22c 	ldr	ip, [r2, #556]
    19f4:	e5878004 	str	r8, [r7, #4]
    19f8:	e28c3060 	add	r3, ip, #96	; 0x60
    19fc:	e5873000 	str	r3, [r7]
    1a00:	e1c781b0 	strh	r8, [r7, #16]
    1a04:	e5879008 	str	r9, [r7, #8]
    1a08:	e587500c 	str	r5, [r7, #12]
    1a0c:	e59d3008 	ldr	r3, [sp, #8]
    1a10:	e59f120c 	ldr	r1, [pc, #524]	; 1c24 <.text+0x1c24>
    1a14:	e79a4003 	ldr	r4, [sl, r3]
    1a18:	e28c2060 	add	r2, ip, #96	; 0x60
    1a1c:	e08a1001 	add	r1, sl, r1
    1a20:	e5940000 	ldr	r0, [r4]
    1a24:	ebfffffe 	bl	0 <fprintf>
    1a28:	e59f11f8 	ldr	r1, [pc, #504]	; 1c28 <.text+0x1c28>
    1a2c:	e1a03005 	mov	r3, r5
    1a30:	e08a1001 	add	r1, sl, r1
    1a34:	e1a02007 	mov	r2, r7
    1a38:	e5940000 	ldr	r0, [r4]
    1a3c:	ebfffffe 	bl	0 <fprintf>
    1a40:	e59d800c 	ldr	r8, [sp, #12]
    1a44:	e59bc014 	ldr	ip, [fp, #20]
    1a48:	e598322c 	ldr	r3, [r8, #556]
    1a4c:	e3a02000 	mov	r2, #0	; 0x0
    1a50:	e2830060 	add	r0, r3, #96	; 0x60
    1a54:	e06c1009 	rsb	r1, ip, r9
    1a58:	e3a0e001 	mov	lr, #1	; 0x1
    1a5c:	e5837064 	str	r7, [r3, #100]
    1a60:	e1c327b2 	strh	r2, [r3, #114]
    1a64:	e583106c 	str	r1, [r3, #108]
    1a68:	e58b001c 	str	r0, [fp, #28]
    1a6c:	e5832060 	str	r2, [r3, #96]
    1a70:	e1c3e7b0 	strh	lr, [r3, #112]
    1a74:	e583c068 	str	ip, [r3, #104]
    1a78:	ebfffffe 	bl	0 <SDL_CursorQuit>
    1a7c:	e3a00001 	mov	r0, #1	; 0x1
    1a80:	ebfffffe 	bl	0 <SDL_CursorInit>
    1a84:	e59d8010 	ldr	r8, [sp, #16]
    1a88:	e5964030 	ldr	r4, [r6, #48]
    1a8c:	e5962028 	ldr	r2, [r6, #40]
    1a90:	e59f3194 	ldr	r3, [pc, #404]	; 1c2c <.text+0x1c2c>
    1a94:	e596102c 	ldr	r1, [r6, #44]
    1a98:	e3580008 	cmp	r8, #8	; 0x8
    1a9c:	e596c024 	ldr	ip, [r6, #36]
    1aa0:	e5967058 	ldr	r7, [r6, #88]
    1aa4:	e59fe184 	ldr	lr, [pc, #388]	; 1c30 <.text+0x1c30>
    1aa8:	e1a00804 	mov	r0, r4, lsl #16
    1aac:	01a0e003 	moveq	lr, r3
    1ab0:	e1a01801 	mov	r1, r1, lsl #16
    1ab4:	e59f3178 	ldr	r3, [pc, #376]	; 1c34 <.text+0x1c34>
    1ab8:	e3520000 	cmp	r2, #0	; 0x0
    1abc:	e59f2174 	ldr	r2, [pc, #372]	; 1c38 <.text+0x1c38>
    1ac0:	e1a00820 	mov	r0, r0, lsr #16
    1ac4:	e1a0c80c 	mov	ip, ip, lsl #16
    1ac8:	e1a01821 	mov	r1, r1, lsr #16
    1acc:	e18710b3 	strh	r1, [r7, r3]
    1ad0:	e1a0c82c 	mov	ip, ip, lsr #16
    1ad4:	e18700b2 	strh	r0, [r7, r2]
    1ad8:	e2833004 	add	r3, r3, #4	; 0x4
    1adc:	e2822004 	add	r2, r2, #4	; 0x4
    1ae0:	e2875da3 	add	r5, r7, #10432	; 0x28c0
    1ae4:	e1a04824 	mov	r4, r4, lsr #16
    1ae8:	e18740b3 	strh	r4, [r7, r3]
    1aec:	e285501a 	add	r5, r5, #26	; 0x1a
    1af0:	e187c0b2 	strh	ip, [r7, r2]
    1af4:	e243302e 	sub	r3, r3, #46	; 0x2e
    1af8:	e3a0c000 	mov	ip, #0	; 0x0
    1afc:	e1c5e0b0 	strh	lr, [r5]
    1b00:	e242202e 	sub	r2, r2, #46	; 0x2e
    1b04:	e187c0b3 	strh	ip, [r7, r3]
    1b08:	e3a0e0ff 	mov	lr, #255	; 0xff
    1b0c:	e2833004 	add	r3, r3, #4	; 0x4
    1b10:	e187e0b2 	strh	lr, [r7, r2]
    1b14:	e5960048 	ldr	r0, [r6, #72]
    1b18:	e187e0b3 	strh	lr, [r7, r3]
    1b1c:	1a0006db 	bne	1b74 <GP2X_SetVideoMode+0x380>
    1b20:	e59d200c 	ldr	r2, [sp, #12]
    1b24:	e1a03800 	mov	r3, r0, lsl #16
    1b28:	e592c22c 	ldr	ip, [r2, #556]
    1b2c:	e1a0e000 	mov	lr, r0
    1b30:	e1a04823 	mov	r4, r3, lsr #16
    1b34:	e59c3048 	ldr	r3, [ip, #72]
    1b38:	e59f10fc 	ldr	r1, [pc, #252]	; 1c3c <.text+0x1c3c>
    1b3c:	e063200e 	rsb	r2, r3, lr
    1b40:	e0633004 	rsb	r3, r3, r4
    1b44:	e2833a01 	add	r3, r3, #4096	; 0x1000
    1b48:	e2822631 	add	r2, r2, #51380224	; 0x3100000
    1b4c:	e1a03803 	mov	r3, r3, lsl #16
    1b50:	e2822a01 	add	r2, r2, #4096	; 0x1000
    1b54:	e59f00e4 	ldr	r0, [pc, #228]	; 1c40 <.text+0x1c40>
    1b58:	e1a03823 	mov	r3, r3, lsr #16
    1b5c:	e1a02822 	mov	r2, r2, lsr #16
    1b60:	e18730b1 	strh	r3, [r7, r1]
    1b64:	e18720b0 	strh	r2, [r7, r0]
    1b68:	e1a0000b 	mov	r0, fp
    1b6c:	e28dd014 	add	sp, sp, #20	; 0x14
    1b70:	e8bd8ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b74:	e59d300c 	ldr	r3, [sp, #12]
////
// convert virtual address to physical (lower word)
static inline unsigned short GP2X_PhysL(_THIS, char *virt)
{
  return (unsigned short)(((long)virt - (long)(this->hidden->vmem) + 0x3101000) & 0xffff);
    1b78:	e1a02800 	mov	r2, r0, lsl #16
    1b7c:	e593c22c 	ldr	ip, [r3, #556]
////
// convert virtual address to physical (lower word)
static inline unsigned short GP2X_PhysL(_THIS, char *virt)
{
  return (unsigned short)(((long)virt - (long)(this->hidden->vmem) + 0x3101000) & 0xffff);
    1b80:	e1a04822 	mov	r4, r2, lsr #16
    1b84:	e59c3048 	ldr	r3, [ip, #72]
////
// convert virtual address to physical (lower word)
static inline unsigned short GP2X_PhysL(_THIS, char *virt)
{
  return (unsigned short)(((long)virt - (long)(this->hidden->vmem) + 0x3101000) & 0xffff);
    1b88:	e1a0e000 	mov	lr, r0
    1b8c:	e5962010 	ldr	r2, [r6, #16]
    1b90:	e0630000 	rsb	r0, r3, r0
    1b94:	e0633004 	rsb	r3, r3, r4
    1b98:	e2833a01 	add	r3, r3, #4096	; 0x1000
    1b9c:	e3520e2d 	cmp	r2, #720	; 0x2d0
    1ba0:	e1a03803 	mov	r3, r3, lsl #16
    1ba4:	e59f2098 	ldr	r2, [pc, #152]	; 1c44 <.text+0x1c44>
    1ba8:	e1a03823 	mov	r3, r3, lsr #16
    1bac:	e18730b2 	strh	r3, [r7, r2]
    1bb0:	05963018 	ldreq	r3, [r6, #24]
    1bb4:	e2800631 	add	r0, r0, #51380224	; 0x3100000
    1bb8:	008ee003 	addeq	lr, lr, r3
    1bbc:	e2800a01 	add	r0, r0, #4096	; 0x1000
    1bc0:	e59f1080 	ldr	r1, [pc, #128]	; 1c48 <.text+0x1c48>
    1bc4:	01a0280e 	moveq	r2, lr, lsl #16
    1bc8:	e1a00820 	mov	r0, r0, lsr #16
    1bcc:	01a04822 	moveq	r4, r2, lsr #16
    1bd0:	e18700b1 	strh	r0, [r7, r1]
    1bd4:	ea0006cb 	b	1b34 <GP2X_SetVideoMode+0x340>
    1bd8:	e0652002 	rsb	r2, r5, r2
    1bdc:	e0813005 	add	r3, r1, r5
    1be0:	e5863074 	str	r3, [r6, #116]
    1be4:	e586207c 	str	r2, [r6, #124]
    1be8:	e5861054 	str	r1, [r6, #84]
    1bec:	e58b1014 	str	r1, [fp, #20]
    1bf0:	ea000661 	b	198c <GP2X_SetVideoMode+0x198>
    1bf4:	ebfffffe 	bl	0 <SDL_Error>
    1bf8:	ea00069f 	b	1a84 <GP2X_SetVideoMode+0x290>
    1bfc:	e59f0048 	ldr	r0, [pc, #72]	; 1c4c <.text+0x1c4c>
    1c00:	e1a0b008 	mov	fp, r8
    1c04:	e08a0000 	add	r0, sl, r0
    1c08:	ebfffffe 	bl	0 <SDL_SetError>
    1c0c:	ea0006d8 	b	1b68 <GP2X_SetVideoMode+0x374>
    1c10:	00000408 	andeq	r0, r0, r8, lsl #8
    1c14:	00000000 	andeq	r0, r0, r0
    1c18:	000007f8 	streqd	r0, [r0], -r8
	...
    1c2c:	000002ab 	andeq	r0, r0, fp, lsr #5
    1c30:	000004ab 	andeq	r0, r0, fp, lsr #9
    1c34:	00002906 	andeq	r2, r0, r6, lsl #18
    1c38:	00002908 	andeq	r2, r0, r8, lsl #18
    1c3c:	00002912 	andeq	r2, r0, r2, lsl r9
    1c40:	00002914 	andeq	r2, r0, r4, lsl r9
    1c44:	0000290e 	andeq	r2, r0, lr, lsl #18
    1c48:	00002910 	andeq	r2, r0, r0, lsl r9
    1c4c:	00000000 	andeq	r0, r0, r0

00001c50 <GP2X_FlipHWSurface>:
    1c50:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
    1c54:	e59030bc 	ldr	r3, [r0, #188]
    1c58:	e590422c 	ldr	r4, [r0, #556]
    1c5c:	e593201c 	ldr	r2, [r3, #28]
    1c60:	e1a05000 	mov	r5, r0
    1c64:	e1d231f2 	ldrsh	r3, [r2, #18]
    1c68:	e1a06001 	mov	r6, r1
    1c6c:	e3530000 	cmp	r3, #0	; 0x0
    1c70:	e1a0e004 	mov	lr, r4
    1c74:	0a00072b 	beq	1cb4 <GP2X_FlipHWSurface+0x64>
static inline void GP2X_WaitBusySurfaces(_THIS)
{
  video_bucket *bucket;

  for (bucket = &this->hidden->video_mem; bucket; bucket = bucket->next)
    1c78:	e2943060 	adds	r3, r4, #96	; 0x60
    1c7c:	0a000723 	beq	1c94 <GP2X_FlipHWSurface+0x44>
    bucket->dirty = 0;
    1c80:	e3a02000 	mov	r2, #0	; 0x0
    1c84:	e1c321b2 	strh	r2, [r3, #18]
    1c88:	e5933004 	ldr	r3, [r3, #4]
    1c8c:	e3530000 	cmp	r3, #0	; 0x0
    1c90:	1a00071e 	bne	1c80 <GP2X_FlipHWSurface+0x30>
  do {} while (this->hidden->fio[MESGSTATUS] & MESG_BUSY);
    1c94:	e594305c 	ldr	r3, [r4, #92]
    1c98:	e2832034 	add	r2, r3, #52	; 0x34
    1c9c:	e5923000 	ldr	r3, [r2]
    1ca0:	e3130001 	tst	r3, #1	; 0x1
    1ca4:	1a000725 	bne	1c9c <GP2X_FlipHWSurface+0x4c>
    1ca8:	e1a00005 	mov	r0, r5
    1cac:	ebfffffe 	bl	864 <GP2X_DummyBlit>
    1cb0:	e595e22c 	ldr	lr, [r5, #556]
    1cb4:	e5945058 	ldr	r5, [r4, #88]
    1cb8:	e2852d46 	add	r2, r5, #4480	; 0x1180
    1cbc:	e2822002 	add	r2, r2, #2	; 0x2
    1cc0:	e1d230b0 	ldrh	r3, [r2]
    1cc4:	e3130010 	tst	r3, #16	; 0x10
    1cc8:	1a00072e 	bne	1cc0 <GP2X_FlipHWSurface+0x70>
    1ccc:	e594004c 	ldr	r0, [r4, #76]
    1cd0:	e5963000 	ldr	r3, [r6]
    1cd4:	e0842100 	add	r2, r4, r0, lsl #2
    1cd8:	e3130101 	tst	r3, #1073741824	; 0x40000000
    1cdc:	12600001 	rsbne	r0, r0, #1	; 0x1
    1ce0:	e5921050 	ldr	r1, [r2, #80]
    1ce4:	e0843100 	add	r3, r4, r0, lsl #2
    1ce8:	e5861014 	str	r1, [r6, #20]
    1cec:	1584004c 	strne	r0, [r4, #76]
    1cf0:	e5941028 	ldr	r1, [r4, #40]
    1cf4:	e5930050 	ldr	r0, [r3, #80]
    1cf8:	e594200c 	ldr	r2, [r4, #12]
    1cfc:	e3510000 	cmp	r1, #0	; 0x0
    1d00:	e0800002 	add	r0, r0, r2
    1d04:	01a0c000 	moveq	ip, r0
    1d08:	01a0380c 	moveq	r3, ip, lsl #16
    1d0c:	01a06823 	moveq	r6, r3, lsr #16
    1d10:	0a000759 	beq	1d6c <GP2X_FlipHWSurface+0x11c>
////
// convert virtual address to physical (lower word)
static inline unsigned short GP2X_PhysL(_THIS, char *virt)
{
  return (unsigned short)(((long)virt - (long)(this->hidden->vmem) + 0x3101000) & 0xffff);
    1d14:	e1a02800 	mov	r2, r0, lsl #16
    1d18:	e59e3048 	ldr	r3, [lr, #72]
////
// convert virtual address to physical (lower word)
static inline unsigned short GP2X_PhysL(_THIS, char *virt)
{
  return (unsigned short)(((long)virt - (long)(this->hidden->vmem) + 0x3101000) & 0xffff);
    1d1c:	e1a06822 	mov	r6, r2, lsr #16
    1d20:	e1a0c000 	mov	ip, r0
    1d24:	e5942010 	ldr	r2, [r4, #16]
    1d28:	e0630000 	rsb	r0, r3, r0
    1d2c:	e0633006 	rsb	r3, r3, r6
    1d30:	e2833a01 	add	r3, r3, #4096	; 0x1000
    1d34:	e3520e2d 	cmp	r2, #720	; 0x2d0
    1d38:	e1a03803 	mov	r3, r3, lsl #16
    1d3c:	e59f208c 	ldr	r2, [pc, #140]	; 1dd0 <.text+0x1dd0>
    1d40:	e1a03823 	mov	r3, r3, lsr #16
    1d44:	e18530b2 	strh	r3, [r5, r2]
    1d48:	05943018 	ldreq	r3, [r4, #24]
    1d4c:	e2800631 	add	r0, r0, #51380224	; 0x3100000
    1d50:	e2800a01 	add	r0, r0, #4096	; 0x1000
    1d54:	e59f1078 	ldr	r1, [pc, #120]	; 1dd4 <.text+0x1dd4>
    1d58:	008cc003 	addeq	ip, ip, r3
    1d5c:	e1a00820 	mov	r0, r0, lsr #16
    1d60:	01a0280c 	moveq	r2, ip, lsl #16
    1d64:	e18500b1 	strh	r0, [r5, r1]
    1d68:	01a06822 	moveq	r6, r2, lsr #16
    1d6c:	e59e3048 	ldr	r3, [lr, #72]
    1d70:	e59f2060 	ldr	r2, [pc, #96]	; 1dd8 <.text+0x1dd8>
    1d74:	e063000c 	rsb	r0, r3, ip
    1d78:	e0633006 	rsb	r3, r3, r6
    1d7c:	e2833a01 	add	r3, r3, #4096	; 0x1000
    1d80:	e594e030 	ldr	lr, [r4, #48]
    1d84:	e594c02c 	ldr	ip, [r4, #44]
    1d88:	e2800631 	add	r0, r0, #51380224	; 0x3100000
    1d8c:	e1a03803 	mov	r3, r3, lsl #16
    1d90:	e1a03823 	mov	r3, r3, lsr #16
    1d94:	e59f1040 	ldr	r1, [pc, #64]	; 1ddc <.text+0x1ddc>
    1d98:	e2800a01 	add	r0, r0, #4096	; 0x1000
    1d9c:	e18530b2 	strh	r3, [r5, r2]
    1da0:	e1a00820 	mov	r0, r0, lsr #16
    1da4:	e59f3034 	ldr	r3, [pc, #52]	; 1de0 <.text+0x1de0>
    1da8:	e1a0c80c 	mov	ip, ip, lsl #16
    1dac:	e1a0e80e 	mov	lr, lr, lsl #16
    1db0:	e18500b1 	strh	r0, [r5, r1]
    1db4:	e1a0c82c 	mov	ip, ip, lsr #16
    1db8:	e1a0e82e 	mov	lr, lr, lsr #16
    1dbc:	e242200a 	sub	r2, r2, #10	; 0xa
    1dc0:	e3a00000 	mov	r0, #0	; 0x0
    1dc4:	e185c0b3 	strh	ip, [r5, r3]
    1dc8:	e185e0b2 	strh	lr, [r5, r2]
    1dcc:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
    1dd0:	0000290e 	andeq	r2, r0, lr, lsl #18
    1dd4:	00002910 	andeq	r2, r0, r0, lsl r9
    1dd8:	00002912 	andeq	r2, r0, r2, lsl r9
    1ddc:	00002914 	andeq	r2, r0, r4, lsl r9
    1de0:	00002906 	andeq	r2, r0, r6, lsl #18

00001de4 <GP2X_HWAccelBlit>:
    1de4:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1de8:	e59fa4a8 	ldr	sl, [pc, #1192]	; 2298 <.text+0x2298>
    1dec:	e1a08002 	mov	r8, r2
    1df0:	e59f24a4 	ldr	r2, [pc, #1188]	; 229c <.text+0x229c>
    1df4:	e08fa00a 	add	sl, pc, sl
    1df8:	e1a06000 	mov	r6, r0
    1dfc:	e79a0002 	ldr	r0, [sl, r2]
    1e00:	e24dd028 	sub	sp, sp, #40	; 0x28
    1e04:	e5900000 	ldr	r0, [r0]
    1e08:	e1a04001 	mov	r4, r1
    1e0c:	e59020bc 	ldr	r2, [r0, #188]
    1e10:	e590922c 	ldr	r9, [r0, #556]
    1e14:	e1520008 	cmp	r2, r8
    1e18:	e58d0010 	str	r0, [sp, #16]
    1e1c:	e1a05003 	mov	r5, r3
    1e20:	e58d9008 	str	r9, [sp, #8]
    1e24:	0a00088f 	beq	2244 <GP2X_HWAccelBlit+0x460>
    1e28:	e1d611b0 	ldrh	r1, [r6, #16]
    1e2c:	e5963000 	ldr	r3, [r6]
    1e30:	e1a02801 	mov	r2, r1, lsl #16
    1e34:	e3130a01 	tst	r3, #4096	; 0x1000
    1e38:	e1a02822 	mov	r2, r2, lsr #16
    1e3c:	e1d430b6 	ldrh	r3, [r4, #6]
    1e40:	e58d2024 	str	r2, [sp, #36]
    1e44:	15962004 	ldrne	r2, [r6, #4]
    1e48:	e58d3018 	str	r3, [sp, #24]
    1e4c:	15923020 	ldrne	r3, [r2, #32]
    1e50:	e1d400f2 	ldrsh	r0, [r4, #2]
    1e54:	11a03803 	movne	r3, r3, lsl #16
    1e58:	e58d100c 	str	r1, [sp, #12]
    1e5c:	05961004 	ldreq	r1, [r6, #4]
    1e60:	e1d4c0f0 	ldrsh	ip, [r4]
    1e64:	1383bd23 	orrne	fp, r3, #2240	; 0x8c0
    1e68:	e58d0020 	str	r0, [sp, #32]
    1e6c:	e1d440b4 	ldrh	r4, [r4, #4]
    1e70:	e1d801b0 	ldrh	r0, [r8, #16]
    1e74:	03a0b0cc 	moveq	fp, #204	; 0xcc
    1e78:	138bb00c 	orrne	fp, fp, #12	; 0xc
    1e7c:	058d1004 	streq	r1, [sp, #4]
    1e80:	158d2004 	strne	r2, [sp, #4]
    1e84:	e1580006 	cmp	r8, r6
    1e88:	e58dc01c 	str	ip, [sp, #28]
    1e8c:	e1d5e0f2 	ldrsh	lr, [r5, #2]
    1e90:	e1d5c0f0 	ldrsh	ip, [r5]
    1e94:	e58d4014 	str	r4, [sp, #20]
    1e98:	138bbc03 	orrne	fp, fp, #768	; 0x300
    1e9c:	11a07000 	movne	r7, r0
    1ea0:	0a000856 	beq	2160 <GP2X_HWAccelBlit+0x37c>
    1ea4:	e5983004 	ldr	r3, [r8, #4]
    1ea8:	e5d32004 	ldrb	r2, [r3, #4]
    1eac:	e3520008 	cmp	r2, #8	; 0x8
    1eb0:	0a000818 	beq	2068 <GP2X_HWAccelBlit+0x284>
    1eb4:	e59d1008 	ldr	r1, [sp, #8]
    1eb8:	e5983014 	ldr	r3, [r8, #20]
    1ebc:	e5912048 	ldr	r2, [r1, #72]
    1ec0:	e0623003 	rsb	r3, r2, r3
    1ec4:	e2833631 	add	r3, r3, #51380224	; 0x3100000
    1ec8:	e2833a01 	add	r3, r3, #4096	; 0x1000
    1ecc:	e0223e90 	mla	r2, r0, lr, r3
    1ed0:	e082008c 	add	r0, r2, ip, lsl #1
    1ed4:	e2003002 	and	r3, r0, #2	; 0x2
    1ed8:	e3530000 	cmp	r3, #0	; 0x0
    1edc:	13a03030 	movne	r3, #48	; 0x30
    1ee0:	03a03020 	moveq	r3, #32	; 0x20
    1ee4:	e58d3000 	str	r3, [sp]
    1ee8:	e599e05c 	ldr	lr, [r9, #92]
    1eec:	e28e2034 	add	r2, lr, #52	; 0x34
    1ef0:	e5923000 	ldr	r3, [r2]
    1ef4:	e2134001 	ands	r4, r3, #1	; 0x1
    1ef8:	1a0007ba 	bne	1ef0 <GP2X_HWAccelBlit+0x10c>
    1efc:	e59d5014 	ldr	r5, [sp, #20]
    1f00:	e59dc018 	ldr	ip, [sp, #24]
    1f04:	e3c03003 	bic	r3, r0, #3	; 0x3
    1f08:	e1d924b4 	ldrh	r2, [r9, #68]
    1f0c:	e185080c 	orr	r0, r5, ip, lsl #16
    1f10:	e1d914b6 	ldrh	r1, [r9, #70]
    1f14:	e59d5000 	ldr	r5, [sp]
    1f18:	e38bcb01 	orr	ip, fp, #1024	; 0x400
    1f1c:	e58e5000 	str	r5, [lr]
    1f20:	e58e3004 	str	r3, [lr, #4]
    1f24:	e58e7008 	str	r7, [lr, #8]
    1f28:	e58e2024 	str	r2, [lr, #36]
    1f2c:	e58e1028 	str	r1, [lr, #40]
    1f30:	e58e4020 	str	r4, [lr, #32]
    1f34:	e58e002c 	str	r0, [lr, #44]
    1f38:	e58ec030 	str	ip, [lr, #48]
    1f3c:	e5963000 	ldr	r3, [r6]
    1f40:	e3130001 	tst	r3, #1	; 0x1
    1f44:	0a0007ff 	beq	2004 <GP2X_HWAccelBlit+0x220>
    1f48:	e59dc004 	ldr	ip, [sp, #4]
    1f4c:	e5dc3004 	ldrb	r3, [ip, #4]
    1f50:	e3530008 	cmp	r3, #8	; 0x8
    1f54:	0a0007de 	beq	1f80 <GP2X_HWAccelBlit+0x19c>
    1f58:	e3530010 	cmp	r3, #16	; 0x10
    1f5c:	0a000871 	beq	21cc <GP2X_HWAccelBlit+0x3e8>
    1f60:	e3530001 	cmp	r3, #1	; 0x1
    1f64:	0a000881 	beq	220c <GP2X_HWAccelBlit+0x428>
    1f68:	e59f0330 	ldr	r0, [pc, #816]	; 22a0 <.text+0x22a0>
    1f6c:	e08a0000 	add	r0, sl, r0
    1f70:	ebfffffe 	bl	0 <SDL_SetError>
    1f74:	e3e00000 	mvn	r0, #0	; 0x0
    1f78:	e28dd028 	add	sp, sp, #40	; 0x28
    1f7c:	e8bd8ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1f80:	e59d0008 	ldr	r0, [sp, #8]
    1f84:	e5963014 	ldr	r3, [r6, #20]
    1f88:	e5902048 	ldr	r2, [r0, #72]
    1f8c:	e59d100c 	ldr	r1, [sp, #12]
    1f90:	e0623003 	rsb	r3, r2, r3
    1f94:	e2833631 	add	r3, r3, #51380224	; 0x3100000
    1f98:	e59d2020 	ldr	r2, [sp, #32]
    1f9c:	e2833a01 	add	r3, r3, #4096	; 0x1000
    1fa0:	e0223291 	mla	r2, r1, r2, r3
    1fa4:	e59d301c 	ldr	r3, [sp, #28]
    1fa8:	e0822003 	add	r2, r2, r3
    1fac:	e2023003 	and	r3, r2, #3	; 0x3
    1fb0:	e1a01183 	mov	r1, r3, lsl #3
    1fb4:	e3813d06 	orr	r3, r1, #384	; 0x180
    1fb8:	e59d1024 	ldr	r1, [sp, #36]
    1fbc:	e3c22003 	bic	r2, r2, #3	; 0x3
    1fc0:	e58e300c 	str	r3, [lr, #12]
    1fc4:	e58e2010 	str	r2, [lr, #16]
    1fc8:	e58e1014 	str	r1, [lr, #20]
    1fcc:	e599205c 	ldr	r2, [r9, #92]
    1fd0:	e3a03001 	mov	r3, #1	; 0x1
    1fd4:	e5823034 	str	r3, [r2, #52]
    1fd8:	e59d0010 	ldr	r0, [sp, #16]
////
// mark surface has been used in HW accel
static inline void GP2X_AddBusySurface(SDL_Surface *surface)
{
  ((video_bucket *)surface->hwdata)->dirty = 1;
    1fdc:	e596201c 	ldr	r2, [r6, #28]
    1fe0:	e59030bc 	ldr	r3, [r0, #188]
////
// mark surface has been used in HW accel
static inline void GP2X_AddBusySurface(SDL_Surface *surface)
{
  ((video_bucket *)surface->hwdata)->dirty = 1;
    1fe4:	e598101c 	ldr	r1, [r8, #28]
    1fe8:	e1580003 	cmp	r8, r3
////
// mark surface has been used in HW accel
static inline void GP2X_AddBusySurface(SDL_Surface *surface)
{
  ((video_bucket *)surface->hwdata)->dirty = 1;
    1fec:	e3a03001 	mov	r3, #1	; 0x1
    1ff0:	e1c231b2 	strh	r3, [r2, #18]
    1ff4:	e1c131b2 	strh	r3, [r1, #18]
    1ff8:	0a000824 	beq	2098 <GP2X_HWAccelBlit+0x2b4>
    1ffc:	e3a00000 	mov	r0, #0	; 0x0
    2000:	ea0007dc 	b	1f78 <GP2X_HWAccelBlit+0x194>
    2004:	e59f3298 	ldr	r3, [pc, #664]	; 22a4 <.text+0x22a4>
    2008:	e59f1298 	ldr	r1, [pc, #664]	; 22a8 <.text+0x22a8>
    200c:	e79a2003 	ldr	r2, [sl, r3]
    2010:	e59d3004 	ldr	r3, [sp, #4]
    2014:	e5920000 	ldr	r0, [r2]
    2018:	e08a1001 	add	r1, sl, r1
    201c:	e5d32004 	ldrb	r2, [r3, #4]
    2020:	ebfffffe 	bl	0 <fprintf>
    2024:	e5963004 	ldr	r3, [r6, #4]
    2028:	e5d33004 	ldrb	r3, [r3, #4]
    202c:	e3530008 	cmp	r3, #8	; 0x8
    2030:	0a000895 	beq	225c <GP2X_HWAccelBlit+0x478>
    2034:	e3530010 	cmp	r3, #16	; 0x10
    2038:	0a000828 	beq	20a8 <GP2X_HWAccelBlit+0x2c4>
    203c:	e3530001 	cmp	r3, #1	; 0x1
    2040:	1a0007d8 	bne	1f68 <GP2X_HWAccelBlit+0x184>
    2044:	e59d501c 	ldr	r5, [sp, #28]
    2048:	e59dc014 	ldr	ip, [sp, #20]
    204c:	e205301f 	and	r3, r5, #31	; 0x1f
    2050:	e08c2003 	add	r2, ip, r3
    2054:	e292101f 	adds	r1, r2, #31	; 0x1f
    2058:	4282103e 	addmi	r1, r2, #62	; 0x3e
    205c:	e1a022c1 	mov	r2, r1, asr #5
    2060:	e38310c0 	orr	r1, r3, #192	; 0xc0
    2064:	ea000836 	b	20e0 <GP2X_HWAccelBlit+0x2fc>
    2068:	e59d5008 	ldr	r5, [sp, #8]
    206c:	e5983014 	ldr	r3, [r8, #20]
    2070:	e5952048 	ldr	r2, [r5, #72]
    2074:	e0623003 	rsb	r3, r2, r3
    2078:	e2833631 	add	r3, r3, #51380224	; 0x3100000
    207c:	e2833a01 	add	r3, r3, #4096	; 0x1000
    2080:	e0223e90 	mla	r2, r0, lr, r3
    2084:	e082000c 	add	r0, r2, ip
    2088:	e2003003 	and	r3, r0, #3	; 0x3
    208c:	e1a03183 	mov	r3, r3, lsl #3
    2090:	e58d3000 	str	r3, [sp]
    2094:	ea0007b8 	b	1ee8 <GP2X_HWAccelBlit+0x104>
    2098:	e599003c 	ldr	r0, [r9, #60]
    209c:	ebfffffe 	bl	0 <SDL_mutexV>
    20a0:	e3a00000 	mov	r0, #0	; 0x0
    20a4:	ea0007dc 	b	1f78 <GP2X_HWAccelBlit+0x194>
    20a8:	e1d621b0 	ldrh	r2, [r6, #16]
    20ac:	e5963014 	ldr	r3, [r6, #20]
    20b0:	e59d1020 	ldr	r1, [sp, #32]
    20b4:	e59d5014 	ldr	r5, [sp, #20]
    20b8:	e0213192 	mla	r1, r2, r1, r3
    20bc:	e59d301c 	ldr	r3, [sp, #28]
    20c0:	e0811083 	add	r1, r1, r3, lsl #1
    20c4:	e2011002 	and	r1, r1, #2	; 0x2
    20c8:	e1a01181 	mov	r1, r1, lsl #3
    20cc:	e0813205 	add	r3, r1, r5, lsl #4
    20d0:	e293201f 	adds	r2, r3, #31	; 0x1f
    20d4:	4283203e 	addmi	r2, r3, #62	; 0x3e
    20d8:	e1a022c2 	mov	r2, r2, asr #5
    20dc:	e38110a0 	orr	r1, r1, #160	; 0xa0
    20e0:	e599305c 	ldr	r3, [r9, #92]
    20e4:	e583100c 	str	r1, [r3, #12]
    20e8:	e59dc018 	ldr	ip, [sp, #24]
    20ec:	e599e05c 	ldr	lr, [r9, #92]
    20f0:	e3a03001 	mov	r3, #1	; 0x1
    20f4:	e24c4001 	sub	r4, ip, #1	; 0x1
    20f8:	e58e3034 	str	r3, [lr, #52]
    20fc:	e3a0c000 	mov	ip, #0	; 0x0
    2100:	e15c0004 	cmp	ip, r4
    2104:	0a0007f4 	beq	1fd8 <GP2X_HWAccelBlit+0x1f4>
    2108:	e31b0c01 	tst	fp, #256	; 0x100
    210c:	0a00084c 	beq	2138 <GP2X_HWAccelBlit+0x354>
    2110:	e2521001 	subs	r1, r2, #1	; 0x1
    2114:	13a03000 	movne	r3, #0	; 0x0
    2118:	13a000ff 	movne	r0, #255	; 0xff
    211c:	0a00084a 	beq	2130 <GP2X_HWAccelBlit+0x34c>
    2120:	e2833001 	add	r3, r3, #1	; 0x1
    2124:	e1510003 	cmp	r1, r3
    2128:	e58e003c 	str	r0, [lr, #60]
    212c:	1a000846 	bne	2120 <GP2X_HWAccelBlit+0x33c>
    2130:	e28cc001 	add	ip, ip, #1	; 0x1
    2134:	ea00083e 	b	2100 <GP2X_HWAccelBlit+0x31c>
    2138:	e2521001 	subs	r1, r2, #1	; 0x1
    213c:	13a03000 	movne	r3, #0	; 0x0
    2140:	13a00080 	movne	r0, #128	; 0x80
    2144:	0a00084a 	beq	2130 <GP2X_HWAccelBlit+0x34c>
    2148:	e2833001 	add	r3, r3, #1	; 0x1
    214c:	e1510003 	cmp	r1, r3
    2150:	e58e003c 	str	r0, [lr, #60]
    2154:	1a000850 	bne	2148 <GP2X_HWAccelBlit+0x364>
    2158:	e28cc001 	add	ip, ip, #1	; 0x1
    215c:	ea00083e 	b	2100 <GP2X_HWAccelBlit+0x31c>
    2160:	e59d301c 	ldr	r3, [sp, #28]
    2164:	e153000c 	cmp	r3, ip
    2168:	b59d1014 	ldrlt	r1, [sp, #20]
    216c:	b59d501c 	ldrlt	r5, [sp, #28]
    2170:	b08c2001 	addlt	r2, ip, r1
    2174:	b0853001 	addlt	r3, r5, r1
    2178:	b242c001 	sublt	ip, r2, #1	; 0x1
    217c:	e59d2020 	ldr	r2, [sp, #32]
    2180:	b2433001 	sublt	r3, r3, #1	; 0x1
    2184:	a38bbc01 	orrge	fp, fp, #256	; 0x100
    2188:	b58d301c 	strlt	r3, [sp, #28]
    218c:	e152000e 	cmp	r2, lr
    2190:	a38bbc02 	orrge	fp, fp, #512	; 0x200
    2194:	a1a07000 	movge	r7, r0
    2198:	aa0007a7 	bge	1ea4 <GP2X_HWAccelBlit+0xc0>
    219c:	e59d1018 	ldr	r1, [sp, #24]
    21a0:	e59d5020 	ldr	r5, [sp, #32]
    21a4:	e08e2001 	add	r2, lr, r1
    21a8:	e242e001 	sub	lr, r2, #1	; 0x1
    21ac:	e59d2024 	ldr	r2, [sp, #36]
    21b0:	e0853001 	add	r3, r5, r1
    21b4:	e2433001 	sub	r3, r3, #1	; 0x1
    21b8:	e2622000 	rsb	r2, r2, #0	; 0x0
    21bc:	e2607000 	rsb	r7, r0, #0	; 0x0
    21c0:	e58d3020 	str	r3, [sp, #32]
    21c4:	e58d2024 	str	r2, [sp, #36]
    21c8:	ea0007a7 	b	1ea4 <GP2X_HWAccelBlit+0xc0>
    21cc:	e59d5008 	ldr	r5, [sp, #8]
    21d0:	e5963014 	ldr	r3, [r6, #20]
    21d4:	e5952048 	ldr	r2, [r5, #72]
    21d8:	e59dc00c 	ldr	ip, [sp, #12]
    21dc:	e0623003 	rsb	r3, r2, r3
    21e0:	e2833631 	add	r3, r3, #51380224	; 0x3100000
    21e4:	e59d2020 	ldr	r2, [sp, #32]
    21e8:	e2833a01 	add	r3, r3, #4096	; 0x1000
    21ec:	e022329c 	mla	r2, ip, r2, r3
    21f0:	e59d001c 	ldr	r0, [sp, #28]
    21f4:	e0822080 	add	r2, r2, r0, lsl #1
    21f8:	e2023002 	and	r3, r2, #2	; 0x2
    21fc:	e3530000 	cmp	r3, #0	; 0x0
    2200:	13a01030 	movne	r1, #48	; 0x30
    2204:	03a01020 	moveq	r1, #32	; 0x20
    2208:	ea0007eb 	b	1fb4 <GP2X_HWAccelBlit+0x1d0>
    220c:	e59d0008 	ldr	r0, [sp, #8]
    2210:	e5963014 	ldr	r3, [r6, #20]
    2214:	e5902048 	ldr	r2, [r0, #72]
    2218:	e59dc00c 	ldr	ip, [sp, #12]
    221c:	e0623003 	rsb	r3, r2, r3
    2220:	e2833631 	add	r3, r3, #51380224	; 0x3100000
    2224:	e59d2020 	ldr	r2, [sp, #32]
    2228:	e2833a01 	add	r3, r3, #4096	; 0x1000
    222c:	e022329c 	mla	r2, ip, r2, r3
    2230:	e59d501c 	ldr	r5, [sp, #28]
    2234:	e205101f 	and	r1, r5, #31	; 0x1f
    2238:	e3811040 	orr	r1, r1, #64	; 0x40
    223c:	e08221c5 	add	r2, r2, r5, asr #3
    2240:	ea0007eb 	b	1fb4 <GP2X_HWAccelBlit+0x1d0>
    2244:	e599003c 	ldr	r0, [r9, #60]
    2248:	ebfffffe 	bl	0 <SDL_mutexP>
    224c:	e59d0010 	ldr	r0, [sp, #16]
    2250:	e590022c 	ldr	r0, [r0, #556]
    2254:	e58d0008 	str	r0, [sp, #8]
    2258:	ea000788 	b	1e28 <GP2X_HWAccelBlit+0x44>
    225c:	e1d621b0 	ldrh	r2, [r6, #16]
    2260:	e5963014 	ldr	r3, [r6, #20]
    2264:	e59d1020 	ldr	r1, [sp, #32]
    2268:	e59d001c 	ldr	r0, [sp, #28]
    226c:	e0213192 	mla	r1, r2, r1, r3
    2270:	e0811000 	add	r1, r1, r0
    2274:	e59d2014 	ldr	r2, [sp, #20]
    2278:	e2011003 	and	r1, r1, #3	; 0x3
    227c:	e1a01181 	mov	r1, r1, lsl #3
    2280:	e0813182 	add	r3, r1, r2, lsl #3
    2284:	e293201f 	adds	r2, r3, #31	; 0x1f
    2288:	4283203e 	addmi	r2, r3, #62	; 0x3e
    228c:	e1a022c2 	mov	r2, r2, asr #5
    2290:	e3811080 	orr	r1, r1, #128	; 0x80
    2294:	ea000836 	b	20e0 <GP2X_HWAccelBlit+0x2fc>
    2298:	0000049c 	muleq	r0, ip, r4
	...

000022ac <GP2X_LockHWSurface>:
    22ac:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    22b0:	e59030bc 	ldr	r3, [r0, #188]
    22b4:	e1a05000 	mov	r5, r0
    22b8:	e1530001 	cmp	r3, r1
    22bc:	e1a04001 	mov	r4, r1
    22c0:	0a0008c6 	beq	2320 <GP2X_LockHWSurface+0x74>
    22c4:	e594301c 	ldr	r3, [r4, #28]
    22c8:	e1d321f2 	ldrsh	r2, [r3, #18]
    22cc:	e3520000 	cmp	r2, #0	; 0x0
    22d0:	1a0008b5 	bne	22dc <GP2X_LockHWSurface+0x30>
    22d4:	e3a00000 	mov	r0, #0	; 0x0
    22d8:	e8bd8030 	ldmia	sp!, {r4, r5, pc}
    22dc:	e1a00005 	mov	r0, r5
    22e0:	ebfffffe 	bl	864 <GP2X_DummyBlit>
static inline void GP2X_WaitBusySurfaces(_THIS)
{
  video_bucket *bucket;

  for (bucket = &this->hidden->video_mem; bucket; bucket = bucket->next)
    22e4:	e595022c 	ldr	r0, [r5, #556]
    22e8:	e2903060 	adds	r3, r0, #96	; 0x60
    22ec:	0a0008bf 	beq	2304 <GP2X_LockHWSurface+0x58>
    bucket->dirty = 0;
    22f0:	e3a02000 	mov	r2, #0	; 0x0
    22f4:	e1c321b2 	strh	r2, [r3, #18]
    22f8:	e5933004 	ldr	r3, [r3, #4]
    22fc:	e3530000 	cmp	r3, #0	; 0x0
    2300:	1a0008ba 	bne	22f0 <GP2X_LockHWSurface+0x44>
  do {} while (this->hidden->fio[MESGSTATUS] & MESG_BUSY);
    2304:	e590305c 	ldr	r3, [r0, #92]
    2308:	e2830034 	add	r0, r3, #52	; 0x34
    230c:	e5903000 	ldr	r3, [r0]
    2310:	e3130001 	tst	r3, #1	; 0x1
    2314:	1a0008c1 	bne	230c <GP2X_LockHWSurface+0x60>
    2318:	e3a00000 	mov	r0, #0	; 0x0
    231c:	e8bd8030 	ldmia	sp!, {r4, r5, pc}
    2320:	e590322c 	ldr	r3, [r0, #556]
    2324:	e593003c 	ldr	r0, [r3, #60]
    2328:	ebfffffe 	bl	0 <SDL_mutexP>
    232c:	ea0008af 	b	22c4 <GP2X_LockHWSurface+0x18>
